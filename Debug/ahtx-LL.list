
ahtx-LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002614  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080026d4  080026d4  000126d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800275c  0800275c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800275c  0800275c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800275c  0800275c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800275c  0800275c  0001275c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002760  08002760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000004  08002768  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08002768  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002597  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a35  00000000  00000000  000225c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e8  00000000  00000000  00022ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000380  00000000  00000000  000233e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000973e  00000000  00000000  00023760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002d02  00000000  00000000  0002ce9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00033379  00000000  00000000  0002fba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00062f19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e58  00000000  00000000  00062f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080026bc 	.word	0x080026bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080026bc 	.word	0x080026bc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_ui2f>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	1e05      	subs	r5, r0, #0
 8000224:	d00e      	beq.n	8000244 <__aeabi_ui2f+0x24>
 8000226:	f001 fa01 	bl	800162c <__clzsi2>
 800022a:	239e      	movs	r3, #158	; 0x9e
 800022c:	0004      	movs	r4, r0
 800022e:	1a1b      	subs	r3, r3, r0
 8000230:	2b96      	cmp	r3, #150	; 0x96
 8000232:	dc0c      	bgt.n	800024e <__aeabi_ui2f+0x2e>
 8000234:	2808      	cmp	r0, #8
 8000236:	dd01      	ble.n	800023c <__aeabi_ui2f+0x1c>
 8000238:	3c08      	subs	r4, #8
 800023a:	40a5      	lsls	r5, r4
 800023c:	026d      	lsls	r5, r5, #9
 800023e:	0a6d      	lsrs	r5, r5, #9
 8000240:	b2d8      	uxtb	r0, r3
 8000242:	e001      	b.n	8000248 <__aeabi_ui2f+0x28>
 8000244:	2000      	movs	r0, #0
 8000246:	2500      	movs	r5, #0
 8000248:	05c0      	lsls	r0, r0, #23
 800024a:	4328      	orrs	r0, r5
 800024c:	bd70      	pop	{r4, r5, r6, pc}
 800024e:	2b99      	cmp	r3, #153	; 0x99
 8000250:	dd09      	ble.n	8000266 <__aeabi_ui2f+0x46>
 8000252:	0002      	movs	r2, r0
 8000254:	0029      	movs	r1, r5
 8000256:	321b      	adds	r2, #27
 8000258:	4091      	lsls	r1, r2
 800025a:	1e4a      	subs	r2, r1, #1
 800025c:	4191      	sbcs	r1, r2
 800025e:	2205      	movs	r2, #5
 8000260:	1a12      	subs	r2, r2, r0
 8000262:	40d5      	lsrs	r5, r2
 8000264:	430d      	orrs	r5, r1
 8000266:	2c05      	cmp	r4, #5
 8000268:	dc12      	bgt.n	8000290 <__aeabi_ui2f+0x70>
 800026a:	0029      	movs	r1, r5
 800026c:	4e0c      	ldr	r6, [pc, #48]	; (80002a0 <__aeabi_ui2f+0x80>)
 800026e:	4031      	ands	r1, r6
 8000270:	076a      	lsls	r2, r5, #29
 8000272:	d009      	beq.n	8000288 <__aeabi_ui2f+0x68>
 8000274:	200f      	movs	r0, #15
 8000276:	4028      	ands	r0, r5
 8000278:	2804      	cmp	r0, #4
 800027a:	d005      	beq.n	8000288 <__aeabi_ui2f+0x68>
 800027c:	3104      	adds	r1, #4
 800027e:	014a      	lsls	r2, r1, #5
 8000280:	d502      	bpl.n	8000288 <__aeabi_ui2f+0x68>
 8000282:	239f      	movs	r3, #159	; 0x9f
 8000284:	4031      	ands	r1, r6
 8000286:	1b1b      	subs	r3, r3, r4
 8000288:	0189      	lsls	r1, r1, #6
 800028a:	0a4d      	lsrs	r5, r1, #9
 800028c:	b2d8      	uxtb	r0, r3
 800028e:	e7db      	b.n	8000248 <__aeabi_ui2f+0x28>
 8000290:	1f62      	subs	r2, r4, #5
 8000292:	4095      	lsls	r5, r2
 8000294:	0029      	movs	r1, r5
 8000296:	4e02      	ldr	r6, [pc, #8]	; (80002a0 <__aeabi_ui2f+0x80>)
 8000298:	4031      	ands	r1, r6
 800029a:	076a      	lsls	r2, r5, #29
 800029c:	d0f4      	beq.n	8000288 <__aeabi_ui2f+0x68>
 800029e:	e7e9      	b.n	8000274 <__aeabi_ui2f+0x54>
 80002a0:	fbffffff 	.word	0xfbffffff

080002a4 <__aeabi_ddiv>:
 80002a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002a6:	4657      	mov	r7, sl
 80002a8:	464e      	mov	r6, r9
 80002aa:	4645      	mov	r5, r8
 80002ac:	46de      	mov	lr, fp
 80002ae:	b5e0      	push	{r5, r6, r7, lr}
 80002b0:	4681      	mov	r9, r0
 80002b2:	0005      	movs	r5, r0
 80002b4:	030c      	lsls	r4, r1, #12
 80002b6:	0048      	lsls	r0, r1, #1
 80002b8:	4692      	mov	sl, r2
 80002ba:	001f      	movs	r7, r3
 80002bc:	b085      	sub	sp, #20
 80002be:	0b24      	lsrs	r4, r4, #12
 80002c0:	0d40      	lsrs	r0, r0, #21
 80002c2:	0fce      	lsrs	r6, r1, #31
 80002c4:	2800      	cmp	r0, #0
 80002c6:	d100      	bne.n	80002ca <__aeabi_ddiv+0x26>
 80002c8:	e156      	b.n	8000578 <__aeabi_ddiv+0x2d4>
 80002ca:	4bd4      	ldr	r3, [pc, #848]	; (800061c <__aeabi_ddiv+0x378>)
 80002cc:	4298      	cmp	r0, r3
 80002ce:	d100      	bne.n	80002d2 <__aeabi_ddiv+0x2e>
 80002d0:	e172      	b.n	80005b8 <__aeabi_ddiv+0x314>
 80002d2:	0f6b      	lsrs	r3, r5, #29
 80002d4:	00e4      	lsls	r4, r4, #3
 80002d6:	431c      	orrs	r4, r3
 80002d8:	2380      	movs	r3, #128	; 0x80
 80002da:	041b      	lsls	r3, r3, #16
 80002dc:	4323      	orrs	r3, r4
 80002de:	4698      	mov	r8, r3
 80002e0:	4bcf      	ldr	r3, [pc, #828]	; (8000620 <__aeabi_ddiv+0x37c>)
 80002e2:	00ed      	lsls	r5, r5, #3
 80002e4:	469b      	mov	fp, r3
 80002e6:	2300      	movs	r3, #0
 80002e8:	4699      	mov	r9, r3
 80002ea:	4483      	add	fp, r0
 80002ec:	9300      	str	r3, [sp, #0]
 80002ee:	033c      	lsls	r4, r7, #12
 80002f0:	007b      	lsls	r3, r7, #1
 80002f2:	4650      	mov	r0, sl
 80002f4:	0b24      	lsrs	r4, r4, #12
 80002f6:	0d5b      	lsrs	r3, r3, #21
 80002f8:	0fff      	lsrs	r7, r7, #31
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d100      	bne.n	8000300 <__aeabi_ddiv+0x5c>
 80002fe:	e11f      	b.n	8000540 <__aeabi_ddiv+0x29c>
 8000300:	4ac6      	ldr	r2, [pc, #792]	; (800061c <__aeabi_ddiv+0x378>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d100      	bne.n	8000308 <__aeabi_ddiv+0x64>
 8000306:	e162      	b.n	80005ce <__aeabi_ddiv+0x32a>
 8000308:	49c5      	ldr	r1, [pc, #788]	; (8000620 <__aeabi_ddiv+0x37c>)
 800030a:	0f42      	lsrs	r2, r0, #29
 800030c:	468c      	mov	ip, r1
 800030e:	00e4      	lsls	r4, r4, #3
 8000310:	4659      	mov	r1, fp
 8000312:	4314      	orrs	r4, r2
 8000314:	2280      	movs	r2, #128	; 0x80
 8000316:	4463      	add	r3, ip
 8000318:	0412      	lsls	r2, r2, #16
 800031a:	1acb      	subs	r3, r1, r3
 800031c:	4314      	orrs	r4, r2
 800031e:	469b      	mov	fp, r3
 8000320:	00c2      	lsls	r2, r0, #3
 8000322:	2000      	movs	r0, #0
 8000324:	0033      	movs	r3, r6
 8000326:	407b      	eors	r3, r7
 8000328:	469a      	mov	sl, r3
 800032a:	464b      	mov	r3, r9
 800032c:	2b0f      	cmp	r3, #15
 800032e:	d827      	bhi.n	8000380 <__aeabi_ddiv+0xdc>
 8000330:	49bc      	ldr	r1, [pc, #752]	; (8000624 <__aeabi_ddiv+0x380>)
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	58cb      	ldr	r3, [r1, r3]
 8000336:	469f      	mov	pc, r3
 8000338:	46b2      	mov	sl, r6
 800033a:	9b00      	ldr	r3, [sp, #0]
 800033c:	2b02      	cmp	r3, #2
 800033e:	d016      	beq.n	800036e <__aeabi_ddiv+0xca>
 8000340:	2b03      	cmp	r3, #3
 8000342:	d100      	bne.n	8000346 <__aeabi_ddiv+0xa2>
 8000344:	e28e      	b.n	8000864 <__aeabi_ddiv+0x5c0>
 8000346:	2b01      	cmp	r3, #1
 8000348:	d000      	beq.n	800034c <__aeabi_ddiv+0xa8>
 800034a:	e0d9      	b.n	8000500 <__aeabi_ddiv+0x25c>
 800034c:	2300      	movs	r3, #0
 800034e:	2400      	movs	r4, #0
 8000350:	2500      	movs	r5, #0
 8000352:	4652      	mov	r2, sl
 8000354:	051b      	lsls	r3, r3, #20
 8000356:	4323      	orrs	r3, r4
 8000358:	07d2      	lsls	r2, r2, #31
 800035a:	4313      	orrs	r3, r2
 800035c:	0028      	movs	r0, r5
 800035e:	0019      	movs	r1, r3
 8000360:	b005      	add	sp, #20
 8000362:	bcf0      	pop	{r4, r5, r6, r7}
 8000364:	46bb      	mov	fp, r7
 8000366:	46b2      	mov	sl, r6
 8000368:	46a9      	mov	r9, r5
 800036a:	46a0      	mov	r8, r4
 800036c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036e:	2400      	movs	r4, #0
 8000370:	2500      	movs	r5, #0
 8000372:	4baa      	ldr	r3, [pc, #680]	; (800061c <__aeabi_ddiv+0x378>)
 8000374:	e7ed      	b.n	8000352 <__aeabi_ddiv+0xae>
 8000376:	46ba      	mov	sl, r7
 8000378:	46a0      	mov	r8, r4
 800037a:	0015      	movs	r5, r2
 800037c:	9000      	str	r0, [sp, #0]
 800037e:	e7dc      	b.n	800033a <__aeabi_ddiv+0x96>
 8000380:	4544      	cmp	r4, r8
 8000382:	d200      	bcs.n	8000386 <__aeabi_ddiv+0xe2>
 8000384:	e1c7      	b.n	8000716 <__aeabi_ddiv+0x472>
 8000386:	d100      	bne.n	800038a <__aeabi_ddiv+0xe6>
 8000388:	e1c2      	b.n	8000710 <__aeabi_ddiv+0x46c>
 800038a:	2301      	movs	r3, #1
 800038c:	425b      	negs	r3, r3
 800038e:	469c      	mov	ip, r3
 8000390:	002e      	movs	r6, r5
 8000392:	4640      	mov	r0, r8
 8000394:	2500      	movs	r5, #0
 8000396:	44e3      	add	fp, ip
 8000398:	0223      	lsls	r3, r4, #8
 800039a:	0e14      	lsrs	r4, r2, #24
 800039c:	431c      	orrs	r4, r3
 800039e:	0c1b      	lsrs	r3, r3, #16
 80003a0:	4699      	mov	r9, r3
 80003a2:	0423      	lsls	r3, r4, #16
 80003a4:	0c1f      	lsrs	r7, r3, #16
 80003a6:	0212      	lsls	r2, r2, #8
 80003a8:	4649      	mov	r1, r9
 80003aa:	9200      	str	r2, [sp, #0]
 80003ac:	9701      	str	r7, [sp, #4]
 80003ae:	f7ff ff31 	bl	8000214 <__aeabi_uidivmod>
 80003b2:	0002      	movs	r2, r0
 80003b4:	437a      	muls	r2, r7
 80003b6:	040b      	lsls	r3, r1, #16
 80003b8:	0c31      	lsrs	r1, r6, #16
 80003ba:	4680      	mov	r8, r0
 80003bc:	4319      	orrs	r1, r3
 80003be:	428a      	cmp	r2, r1
 80003c0:	d907      	bls.n	80003d2 <__aeabi_ddiv+0x12e>
 80003c2:	2301      	movs	r3, #1
 80003c4:	425b      	negs	r3, r3
 80003c6:	469c      	mov	ip, r3
 80003c8:	1909      	adds	r1, r1, r4
 80003ca:	44e0      	add	r8, ip
 80003cc:	428c      	cmp	r4, r1
 80003ce:	d800      	bhi.n	80003d2 <__aeabi_ddiv+0x12e>
 80003d0:	e207      	b.n	80007e2 <__aeabi_ddiv+0x53e>
 80003d2:	1a88      	subs	r0, r1, r2
 80003d4:	4649      	mov	r1, r9
 80003d6:	f7ff ff1d 	bl	8000214 <__aeabi_uidivmod>
 80003da:	0409      	lsls	r1, r1, #16
 80003dc:	468c      	mov	ip, r1
 80003de:	0431      	lsls	r1, r6, #16
 80003e0:	4666      	mov	r6, ip
 80003e2:	9a01      	ldr	r2, [sp, #4]
 80003e4:	0c09      	lsrs	r1, r1, #16
 80003e6:	4342      	muls	r2, r0
 80003e8:	0003      	movs	r3, r0
 80003ea:	4331      	orrs	r1, r6
 80003ec:	428a      	cmp	r2, r1
 80003ee:	d904      	bls.n	80003fa <__aeabi_ddiv+0x156>
 80003f0:	1909      	adds	r1, r1, r4
 80003f2:	3b01      	subs	r3, #1
 80003f4:	428c      	cmp	r4, r1
 80003f6:	d800      	bhi.n	80003fa <__aeabi_ddiv+0x156>
 80003f8:	e1ed      	b.n	80007d6 <__aeabi_ddiv+0x532>
 80003fa:	1a88      	subs	r0, r1, r2
 80003fc:	4642      	mov	r2, r8
 80003fe:	0412      	lsls	r2, r2, #16
 8000400:	431a      	orrs	r2, r3
 8000402:	4690      	mov	r8, r2
 8000404:	4641      	mov	r1, r8
 8000406:	9b00      	ldr	r3, [sp, #0]
 8000408:	040e      	lsls	r6, r1, #16
 800040a:	0c1b      	lsrs	r3, r3, #16
 800040c:	001f      	movs	r7, r3
 800040e:	9302      	str	r3, [sp, #8]
 8000410:	9b00      	ldr	r3, [sp, #0]
 8000412:	0c36      	lsrs	r6, r6, #16
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	0c19      	lsrs	r1, r3, #16
 8000418:	000b      	movs	r3, r1
 800041a:	4373      	muls	r3, r6
 800041c:	0c12      	lsrs	r2, r2, #16
 800041e:	437e      	muls	r6, r7
 8000420:	9103      	str	r1, [sp, #12]
 8000422:	4351      	muls	r1, r2
 8000424:	437a      	muls	r2, r7
 8000426:	0c1f      	lsrs	r7, r3, #16
 8000428:	46bc      	mov	ip, r7
 800042a:	1876      	adds	r6, r6, r1
 800042c:	4466      	add	r6, ip
 800042e:	42b1      	cmp	r1, r6
 8000430:	d903      	bls.n	800043a <__aeabi_ddiv+0x196>
 8000432:	2180      	movs	r1, #128	; 0x80
 8000434:	0249      	lsls	r1, r1, #9
 8000436:	468c      	mov	ip, r1
 8000438:	4462      	add	r2, ip
 800043a:	0c31      	lsrs	r1, r6, #16
 800043c:	188a      	adds	r2, r1, r2
 800043e:	0431      	lsls	r1, r6, #16
 8000440:	041e      	lsls	r6, r3, #16
 8000442:	0c36      	lsrs	r6, r6, #16
 8000444:	198e      	adds	r6, r1, r6
 8000446:	4290      	cmp	r0, r2
 8000448:	d302      	bcc.n	8000450 <__aeabi_ddiv+0x1ac>
 800044a:	d112      	bne.n	8000472 <__aeabi_ddiv+0x1ce>
 800044c:	42b5      	cmp	r5, r6
 800044e:	d210      	bcs.n	8000472 <__aeabi_ddiv+0x1ce>
 8000450:	4643      	mov	r3, r8
 8000452:	1e59      	subs	r1, r3, #1
 8000454:	9b00      	ldr	r3, [sp, #0]
 8000456:	469c      	mov	ip, r3
 8000458:	4465      	add	r5, ip
 800045a:	001f      	movs	r7, r3
 800045c:	429d      	cmp	r5, r3
 800045e:	419b      	sbcs	r3, r3
 8000460:	425b      	negs	r3, r3
 8000462:	191b      	adds	r3, r3, r4
 8000464:	18c0      	adds	r0, r0, r3
 8000466:	4284      	cmp	r4, r0
 8000468:	d200      	bcs.n	800046c <__aeabi_ddiv+0x1c8>
 800046a:	e1a0      	b.n	80007ae <__aeabi_ddiv+0x50a>
 800046c:	d100      	bne.n	8000470 <__aeabi_ddiv+0x1cc>
 800046e:	e19b      	b.n	80007a8 <__aeabi_ddiv+0x504>
 8000470:	4688      	mov	r8, r1
 8000472:	1bae      	subs	r6, r5, r6
 8000474:	42b5      	cmp	r5, r6
 8000476:	41ad      	sbcs	r5, r5
 8000478:	1a80      	subs	r0, r0, r2
 800047a:	426d      	negs	r5, r5
 800047c:	1b40      	subs	r0, r0, r5
 800047e:	4284      	cmp	r4, r0
 8000480:	d100      	bne.n	8000484 <__aeabi_ddiv+0x1e0>
 8000482:	e1d5      	b.n	8000830 <__aeabi_ddiv+0x58c>
 8000484:	4649      	mov	r1, r9
 8000486:	f7ff fec5 	bl	8000214 <__aeabi_uidivmod>
 800048a:	9a01      	ldr	r2, [sp, #4]
 800048c:	040b      	lsls	r3, r1, #16
 800048e:	4342      	muls	r2, r0
 8000490:	0c31      	lsrs	r1, r6, #16
 8000492:	0005      	movs	r5, r0
 8000494:	4319      	orrs	r1, r3
 8000496:	428a      	cmp	r2, r1
 8000498:	d900      	bls.n	800049c <__aeabi_ddiv+0x1f8>
 800049a:	e16c      	b.n	8000776 <__aeabi_ddiv+0x4d2>
 800049c:	1a88      	subs	r0, r1, r2
 800049e:	4649      	mov	r1, r9
 80004a0:	f7ff feb8 	bl	8000214 <__aeabi_uidivmod>
 80004a4:	9a01      	ldr	r2, [sp, #4]
 80004a6:	0436      	lsls	r6, r6, #16
 80004a8:	4342      	muls	r2, r0
 80004aa:	0409      	lsls	r1, r1, #16
 80004ac:	0c36      	lsrs	r6, r6, #16
 80004ae:	0003      	movs	r3, r0
 80004b0:	430e      	orrs	r6, r1
 80004b2:	42b2      	cmp	r2, r6
 80004b4:	d900      	bls.n	80004b8 <__aeabi_ddiv+0x214>
 80004b6:	e153      	b.n	8000760 <__aeabi_ddiv+0x4bc>
 80004b8:	9803      	ldr	r0, [sp, #12]
 80004ba:	1ab6      	subs	r6, r6, r2
 80004bc:	0002      	movs	r2, r0
 80004be:	042d      	lsls	r5, r5, #16
 80004c0:	431d      	orrs	r5, r3
 80004c2:	9f02      	ldr	r7, [sp, #8]
 80004c4:	042b      	lsls	r3, r5, #16
 80004c6:	0c1b      	lsrs	r3, r3, #16
 80004c8:	435a      	muls	r2, r3
 80004ca:	437b      	muls	r3, r7
 80004cc:	469c      	mov	ip, r3
 80004ce:	0c29      	lsrs	r1, r5, #16
 80004d0:	4348      	muls	r0, r1
 80004d2:	0c13      	lsrs	r3, r2, #16
 80004d4:	4484      	add	ip, r0
 80004d6:	4463      	add	r3, ip
 80004d8:	4379      	muls	r1, r7
 80004da:	4298      	cmp	r0, r3
 80004dc:	d903      	bls.n	80004e6 <__aeabi_ddiv+0x242>
 80004de:	2080      	movs	r0, #128	; 0x80
 80004e0:	0240      	lsls	r0, r0, #9
 80004e2:	4684      	mov	ip, r0
 80004e4:	4461      	add	r1, ip
 80004e6:	0c18      	lsrs	r0, r3, #16
 80004e8:	0412      	lsls	r2, r2, #16
 80004ea:	041b      	lsls	r3, r3, #16
 80004ec:	0c12      	lsrs	r2, r2, #16
 80004ee:	1841      	adds	r1, r0, r1
 80004f0:	189b      	adds	r3, r3, r2
 80004f2:	428e      	cmp	r6, r1
 80004f4:	d200      	bcs.n	80004f8 <__aeabi_ddiv+0x254>
 80004f6:	e0ff      	b.n	80006f8 <__aeabi_ddiv+0x454>
 80004f8:	d100      	bne.n	80004fc <__aeabi_ddiv+0x258>
 80004fa:	e0fa      	b.n	80006f2 <__aeabi_ddiv+0x44e>
 80004fc:	2301      	movs	r3, #1
 80004fe:	431d      	orrs	r5, r3
 8000500:	4a49      	ldr	r2, [pc, #292]	; (8000628 <__aeabi_ddiv+0x384>)
 8000502:	445a      	add	r2, fp
 8000504:	2a00      	cmp	r2, #0
 8000506:	dc00      	bgt.n	800050a <__aeabi_ddiv+0x266>
 8000508:	e0aa      	b.n	8000660 <__aeabi_ddiv+0x3bc>
 800050a:	076b      	lsls	r3, r5, #29
 800050c:	d000      	beq.n	8000510 <__aeabi_ddiv+0x26c>
 800050e:	e13d      	b.n	800078c <__aeabi_ddiv+0x4e8>
 8000510:	08ed      	lsrs	r5, r5, #3
 8000512:	4643      	mov	r3, r8
 8000514:	01db      	lsls	r3, r3, #7
 8000516:	d506      	bpl.n	8000526 <__aeabi_ddiv+0x282>
 8000518:	4642      	mov	r2, r8
 800051a:	4b44      	ldr	r3, [pc, #272]	; (800062c <__aeabi_ddiv+0x388>)
 800051c:	401a      	ands	r2, r3
 800051e:	4690      	mov	r8, r2
 8000520:	2280      	movs	r2, #128	; 0x80
 8000522:	00d2      	lsls	r2, r2, #3
 8000524:	445a      	add	r2, fp
 8000526:	4b42      	ldr	r3, [pc, #264]	; (8000630 <__aeabi_ddiv+0x38c>)
 8000528:	429a      	cmp	r2, r3
 800052a:	dd00      	ble.n	800052e <__aeabi_ddiv+0x28a>
 800052c:	e71f      	b.n	800036e <__aeabi_ddiv+0xca>
 800052e:	4643      	mov	r3, r8
 8000530:	075b      	lsls	r3, r3, #29
 8000532:	431d      	orrs	r5, r3
 8000534:	4643      	mov	r3, r8
 8000536:	0552      	lsls	r2, r2, #21
 8000538:	025c      	lsls	r4, r3, #9
 800053a:	0b24      	lsrs	r4, r4, #12
 800053c:	0d53      	lsrs	r3, r2, #21
 800053e:	e708      	b.n	8000352 <__aeabi_ddiv+0xae>
 8000540:	4652      	mov	r2, sl
 8000542:	4322      	orrs	r2, r4
 8000544:	d100      	bne.n	8000548 <__aeabi_ddiv+0x2a4>
 8000546:	e07b      	b.n	8000640 <__aeabi_ddiv+0x39c>
 8000548:	2c00      	cmp	r4, #0
 800054a:	d100      	bne.n	800054e <__aeabi_ddiv+0x2aa>
 800054c:	e0fa      	b.n	8000744 <__aeabi_ddiv+0x4a0>
 800054e:	0020      	movs	r0, r4
 8000550:	f001 f86c 	bl	800162c <__clzsi2>
 8000554:	0002      	movs	r2, r0
 8000556:	3a0b      	subs	r2, #11
 8000558:	231d      	movs	r3, #29
 800055a:	0001      	movs	r1, r0
 800055c:	1a9b      	subs	r3, r3, r2
 800055e:	4652      	mov	r2, sl
 8000560:	3908      	subs	r1, #8
 8000562:	40da      	lsrs	r2, r3
 8000564:	408c      	lsls	r4, r1
 8000566:	4314      	orrs	r4, r2
 8000568:	4652      	mov	r2, sl
 800056a:	408a      	lsls	r2, r1
 800056c:	4b31      	ldr	r3, [pc, #196]	; (8000634 <__aeabi_ddiv+0x390>)
 800056e:	4458      	add	r0, fp
 8000570:	469b      	mov	fp, r3
 8000572:	4483      	add	fp, r0
 8000574:	2000      	movs	r0, #0
 8000576:	e6d5      	b.n	8000324 <__aeabi_ddiv+0x80>
 8000578:	464b      	mov	r3, r9
 800057a:	4323      	orrs	r3, r4
 800057c:	4698      	mov	r8, r3
 800057e:	d044      	beq.n	800060a <__aeabi_ddiv+0x366>
 8000580:	2c00      	cmp	r4, #0
 8000582:	d100      	bne.n	8000586 <__aeabi_ddiv+0x2e2>
 8000584:	e0ce      	b.n	8000724 <__aeabi_ddiv+0x480>
 8000586:	0020      	movs	r0, r4
 8000588:	f001 f850 	bl	800162c <__clzsi2>
 800058c:	0001      	movs	r1, r0
 800058e:	0002      	movs	r2, r0
 8000590:	390b      	subs	r1, #11
 8000592:	231d      	movs	r3, #29
 8000594:	1a5b      	subs	r3, r3, r1
 8000596:	4649      	mov	r1, r9
 8000598:	0010      	movs	r0, r2
 800059a:	40d9      	lsrs	r1, r3
 800059c:	3808      	subs	r0, #8
 800059e:	4084      	lsls	r4, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	464d      	mov	r5, r9
 80005a4:	4323      	orrs	r3, r4
 80005a6:	4698      	mov	r8, r3
 80005a8:	4085      	lsls	r5, r0
 80005aa:	4823      	ldr	r0, [pc, #140]	; (8000638 <__aeabi_ddiv+0x394>)
 80005ac:	1a83      	subs	r3, r0, r2
 80005ae:	469b      	mov	fp, r3
 80005b0:	2300      	movs	r3, #0
 80005b2:	4699      	mov	r9, r3
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	e69a      	b.n	80002ee <__aeabi_ddiv+0x4a>
 80005b8:	464b      	mov	r3, r9
 80005ba:	4323      	orrs	r3, r4
 80005bc:	4698      	mov	r8, r3
 80005be:	d11d      	bne.n	80005fc <__aeabi_ddiv+0x358>
 80005c0:	2308      	movs	r3, #8
 80005c2:	4699      	mov	r9, r3
 80005c4:	3b06      	subs	r3, #6
 80005c6:	2500      	movs	r5, #0
 80005c8:	4683      	mov	fp, r0
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	e68f      	b.n	80002ee <__aeabi_ddiv+0x4a>
 80005ce:	4652      	mov	r2, sl
 80005d0:	4322      	orrs	r2, r4
 80005d2:	d109      	bne.n	80005e8 <__aeabi_ddiv+0x344>
 80005d4:	2302      	movs	r3, #2
 80005d6:	4649      	mov	r1, r9
 80005d8:	4319      	orrs	r1, r3
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <__aeabi_ddiv+0x398>)
 80005dc:	4689      	mov	r9, r1
 80005de:	469c      	mov	ip, r3
 80005e0:	2400      	movs	r4, #0
 80005e2:	2002      	movs	r0, #2
 80005e4:	44e3      	add	fp, ip
 80005e6:	e69d      	b.n	8000324 <__aeabi_ddiv+0x80>
 80005e8:	2303      	movs	r3, #3
 80005ea:	464a      	mov	r2, r9
 80005ec:	431a      	orrs	r2, r3
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <__aeabi_ddiv+0x398>)
 80005f0:	4691      	mov	r9, r2
 80005f2:	469c      	mov	ip, r3
 80005f4:	4652      	mov	r2, sl
 80005f6:	2003      	movs	r0, #3
 80005f8:	44e3      	add	fp, ip
 80005fa:	e693      	b.n	8000324 <__aeabi_ddiv+0x80>
 80005fc:	230c      	movs	r3, #12
 80005fe:	4699      	mov	r9, r3
 8000600:	3b09      	subs	r3, #9
 8000602:	46a0      	mov	r8, r4
 8000604:	4683      	mov	fp, r0
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	e671      	b.n	80002ee <__aeabi_ddiv+0x4a>
 800060a:	2304      	movs	r3, #4
 800060c:	4699      	mov	r9, r3
 800060e:	2300      	movs	r3, #0
 8000610:	469b      	mov	fp, r3
 8000612:	3301      	adds	r3, #1
 8000614:	2500      	movs	r5, #0
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	e669      	b.n	80002ee <__aeabi_ddiv+0x4a>
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	000007ff 	.word	0x000007ff
 8000620:	fffffc01 	.word	0xfffffc01
 8000624:	080026dc 	.word	0x080026dc
 8000628:	000003ff 	.word	0x000003ff
 800062c:	feffffff 	.word	0xfeffffff
 8000630:	000007fe 	.word	0x000007fe
 8000634:	000003f3 	.word	0x000003f3
 8000638:	fffffc0d 	.word	0xfffffc0d
 800063c:	fffff801 	.word	0xfffff801
 8000640:	4649      	mov	r1, r9
 8000642:	2301      	movs	r3, #1
 8000644:	4319      	orrs	r1, r3
 8000646:	4689      	mov	r9, r1
 8000648:	2400      	movs	r4, #0
 800064a:	2001      	movs	r0, #1
 800064c:	e66a      	b.n	8000324 <__aeabi_ddiv+0x80>
 800064e:	2300      	movs	r3, #0
 8000650:	2480      	movs	r4, #128	; 0x80
 8000652:	469a      	mov	sl, r3
 8000654:	2500      	movs	r5, #0
 8000656:	4b8a      	ldr	r3, [pc, #552]	; (8000880 <__aeabi_ddiv+0x5dc>)
 8000658:	0324      	lsls	r4, r4, #12
 800065a:	e67a      	b.n	8000352 <__aeabi_ddiv+0xae>
 800065c:	2501      	movs	r5, #1
 800065e:	426d      	negs	r5, r5
 8000660:	2301      	movs	r3, #1
 8000662:	1a9b      	subs	r3, r3, r2
 8000664:	2b38      	cmp	r3, #56	; 0x38
 8000666:	dd00      	ble.n	800066a <__aeabi_ddiv+0x3c6>
 8000668:	e670      	b.n	800034c <__aeabi_ddiv+0xa8>
 800066a:	2b1f      	cmp	r3, #31
 800066c:	dc00      	bgt.n	8000670 <__aeabi_ddiv+0x3cc>
 800066e:	e0bf      	b.n	80007f0 <__aeabi_ddiv+0x54c>
 8000670:	211f      	movs	r1, #31
 8000672:	4249      	negs	r1, r1
 8000674:	1a8a      	subs	r2, r1, r2
 8000676:	4641      	mov	r1, r8
 8000678:	40d1      	lsrs	r1, r2
 800067a:	000a      	movs	r2, r1
 800067c:	2b20      	cmp	r3, #32
 800067e:	d004      	beq.n	800068a <__aeabi_ddiv+0x3e6>
 8000680:	4641      	mov	r1, r8
 8000682:	4b80      	ldr	r3, [pc, #512]	; (8000884 <__aeabi_ddiv+0x5e0>)
 8000684:	445b      	add	r3, fp
 8000686:	4099      	lsls	r1, r3
 8000688:	430d      	orrs	r5, r1
 800068a:	1e6b      	subs	r3, r5, #1
 800068c:	419d      	sbcs	r5, r3
 800068e:	2307      	movs	r3, #7
 8000690:	432a      	orrs	r2, r5
 8000692:	001d      	movs	r5, r3
 8000694:	2400      	movs	r4, #0
 8000696:	4015      	ands	r5, r2
 8000698:	4213      	tst	r3, r2
 800069a:	d100      	bne.n	800069e <__aeabi_ddiv+0x3fa>
 800069c:	e0d4      	b.n	8000848 <__aeabi_ddiv+0x5a4>
 800069e:	210f      	movs	r1, #15
 80006a0:	2300      	movs	r3, #0
 80006a2:	4011      	ands	r1, r2
 80006a4:	2904      	cmp	r1, #4
 80006a6:	d100      	bne.n	80006aa <__aeabi_ddiv+0x406>
 80006a8:	e0cb      	b.n	8000842 <__aeabi_ddiv+0x59e>
 80006aa:	1d11      	adds	r1, r2, #4
 80006ac:	4291      	cmp	r1, r2
 80006ae:	4192      	sbcs	r2, r2
 80006b0:	4252      	negs	r2, r2
 80006b2:	189b      	adds	r3, r3, r2
 80006b4:	000a      	movs	r2, r1
 80006b6:	0219      	lsls	r1, r3, #8
 80006b8:	d400      	bmi.n	80006bc <__aeabi_ddiv+0x418>
 80006ba:	e0c2      	b.n	8000842 <__aeabi_ddiv+0x59e>
 80006bc:	2301      	movs	r3, #1
 80006be:	2400      	movs	r4, #0
 80006c0:	2500      	movs	r5, #0
 80006c2:	e646      	b.n	8000352 <__aeabi_ddiv+0xae>
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	4641      	mov	r1, r8
 80006c8:	031b      	lsls	r3, r3, #12
 80006ca:	4219      	tst	r1, r3
 80006cc:	d008      	beq.n	80006e0 <__aeabi_ddiv+0x43c>
 80006ce:	421c      	tst	r4, r3
 80006d0:	d106      	bne.n	80006e0 <__aeabi_ddiv+0x43c>
 80006d2:	431c      	orrs	r4, r3
 80006d4:	0324      	lsls	r4, r4, #12
 80006d6:	46ba      	mov	sl, r7
 80006d8:	0015      	movs	r5, r2
 80006da:	4b69      	ldr	r3, [pc, #420]	; (8000880 <__aeabi_ddiv+0x5dc>)
 80006dc:	0b24      	lsrs	r4, r4, #12
 80006de:	e638      	b.n	8000352 <__aeabi_ddiv+0xae>
 80006e0:	2480      	movs	r4, #128	; 0x80
 80006e2:	4643      	mov	r3, r8
 80006e4:	0324      	lsls	r4, r4, #12
 80006e6:	431c      	orrs	r4, r3
 80006e8:	0324      	lsls	r4, r4, #12
 80006ea:	46b2      	mov	sl, r6
 80006ec:	4b64      	ldr	r3, [pc, #400]	; (8000880 <__aeabi_ddiv+0x5dc>)
 80006ee:	0b24      	lsrs	r4, r4, #12
 80006f0:	e62f      	b.n	8000352 <__aeabi_ddiv+0xae>
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d100      	bne.n	80006f8 <__aeabi_ddiv+0x454>
 80006f6:	e703      	b.n	8000500 <__aeabi_ddiv+0x25c>
 80006f8:	19a6      	adds	r6, r4, r6
 80006fa:	1e68      	subs	r0, r5, #1
 80006fc:	42a6      	cmp	r6, r4
 80006fe:	d200      	bcs.n	8000702 <__aeabi_ddiv+0x45e>
 8000700:	e08d      	b.n	800081e <__aeabi_ddiv+0x57a>
 8000702:	428e      	cmp	r6, r1
 8000704:	d200      	bcs.n	8000708 <__aeabi_ddiv+0x464>
 8000706:	e0a3      	b.n	8000850 <__aeabi_ddiv+0x5ac>
 8000708:	d100      	bne.n	800070c <__aeabi_ddiv+0x468>
 800070a:	e0b3      	b.n	8000874 <__aeabi_ddiv+0x5d0>
 800070c:	0005      	movs	r5, r0
 800070e:	e6f5      	b.n	80004fc <__aeabi_ddiv+0x258>
 8000710:	42aa      	cmp	r2, r5
 8000712:	d900      	bls.n	8000716 <__aeabi_ddiv+0x472>
 8000714:	e639      	b.n	800038a <__aeabi_ddiv+0xe6>
 8000716:	4643      	mov	r3, r8
 8000718:	07de      	lsls	r6, r3, #31
 800071a:	0858      	lsrs	r0, r3, #1
 800071c:	086b      	lsrs	r3, r5, #1
 800071e:	431e      	orrs	r6, r3
 8000720:	07ed      	lsls	r5, r5, #31
 8000722:	e639      	b.n	8000398 <__aeabi_ddiv+0xf4>
 8000724:	4648      	mov	r0, r9
 8000726:	f000 ff81 	bl	800162c <__clzsi2>
 800072a:	0001      	movs	r1, r0
 800072c:	0002      	movs	r2, r0
 800072e:	3115      	adds	r1, #21
 8000730:	3220      	adds	r2, #32
 8000732:	291c      	cmp	r1, #28
 8000734:	dc00      	bgt.n	8000738 <__aeabi_ddiv+0x494>
 8000736:	e72c      	b.n	8000592 <__aeabi_ddiv+0x2ee>
 8000738:	464b      	mov	r3, r9
 800073a:	3808      	subs	r0, #8
 800073c:	4083      	lsls	r3, r0
 800073e:	2500      	movs	r5, #0
 8000740:	4698      	mov	r8, r3
 8000742:	e732      	b.n	80005aa <__aeabi_ddiv+0x306>
 8000744:	f000 ff72 	bl	800162c <__clzsi2>
 8000748:	0003      	movs	r3, r0
 800074a:	001a      	movs	r2, r3
 800074c:	3215      	adds	r2, #21
 800074e:	3020      	adds	r0, #32
 8000750:	2a1c      	cmp	r2, #28
 8000752:	dc00      	bgt.n	8000756 <__aeabi_ddiv+0x4b2>
 8000754:	e700      	b.n	8000558 <__aeabi_ddiv+0x2b4>
 8000756:	4654      	mov	r4, sl
 8000758:	3b08      	subs	r3, #8
 800075a:	2200      	movs	r2, #0
 800075c:	409c      	lsls	r4, r3
 800075e:	e705      	b.n	800056c <__aeabi_ddiv+0x2c8>
 8000760:	1936      	adds	r6, r6, r4
 8000762:	3b01      	subs	r3, #1
 8000764:	42b4      	cmp	r4, r6
 8000766:	d900      	bls.n	800076a <__aeabi_ddiv+0x4c6>
 8000768:	e6a6      	b.n	80004b8 <__aeabi_ddiv+0x214>
 800076a:	42b2      	cmp	r2, r6
 800076c:	d800      	bhi.n	8000770 <__aeabi_ddiv+0x4cc>
 800076e:	e6a3      	b.n	80004b8 <__aeabi_ddiv+0x214>
 8000770:	1e83      	subs	r3, r0, #2
 8000772:	1936      	adds	r6, r6, r4
 8000774:	e6a0      	b.n	80004b8 <__aeabi_ddiv+0x214>
 8000776:	1909      	adds	r1, r1, r4
 8000778:	3d01      	subs	r5, #1
 800077a:	428c      	cmp	r4, r1
 800077c:	d900      	bls.n	8000780 <__aeabi_ddiv+0x4dc>
 800077e:	e68d      	b.n	800049c <__aeabi_ddiv+0x1f8>
 8000780:	428a      	cmp	r2, r1
 8000782:	d800      	bhi.n	8000786 <__aeabi_ddiv+0x4e2>
 8000784:	e68a      	b.n	800049c <__aeabi_ddiv+0x1f8>
 8000786:	1e85      	subs	r5, r0, #2
 8000788:	1909      	adds	r1, r1, r4
 800078a:	e687      	b.n	800049c <__aeabi_ddiv+0x1f8>
 800078c:	230f      	movs	r3, #15
 800078e:	402b      	ands	r3, r5
 8000790:	2b04      	cmp	r3, #4
 8000792:	d100      	bne.n	8000796 <__aeabi_ddiv+0x4f2>
 8000794:	e6bc      	b.n	8000510 <__aeabi_ddiv+0x26c>
 8000796:	2305      	movs	r3, #5
 8000798:	425b      	negs	r3, r3
 800079a:	42ab      	cmp	r3, r5
 800079c:	419b      	sbcs	r3, r3
 800079e:	3504      	adds	r5, #4
 80007a0:	425b      	negs	r3, r3
 80007a2:	08ed      	lsrs	r5, r5, #3
 80007a4:	4498      	add	r8, r3
 80007a6:	e6b4      	b.n	8000512 <__aeabi_ddiv+0x26e>
 80007a8:	42af      	cmp	r7, r5
 80007aa:	d900      	bls.n	80007ae <__aeabi_ddiv+0x50a>
 80007ac:	e660      	b.n	8000470 <__aeabi_ddiv+0x1cc>
 80007ae:	4282      	cmp	r2, r0
 80007b0:	d804      	bhi.n	80007bc <__aeabi_ddiv+0x518>
 80007b2:	d000      	beq.n	80007b6 <__aeabi_ddiv+0x512>
 80007b4:	e65c      	b.n	8000470 <__aeabi_ddiv+0x1cc>
 80007b6:	42ae      	cmp	r6, r5
 80007b8:	d800      	bhi.n	80007bc <__aeabi_ddiv+0x518>
 80007ba:	e659      	b.n	8000470 <__aeabi_ddiv+0x1cc>
 80007bc:	2302      	movs	r3, #2
 80007be:	425b      	negs	r3, r3
 80007c0:	469c      	mov	ip, r3
 80007c2:	9b00      	ldr	r3, [sp, #0]
 80007c4:	44e0      	add	r8, ip
 80007c6:	469c      	mov	ip, r3
 80007c8:	4465      	add	r5, ip
 80007ca:	429d      	cmp	r5, r3
 80007cc:	419b      	sbcs	r3, r3
 80007ce:	425b      	negs	r3, r3
 80007d0:	191b      	adds	r3, r3, r4
 80007d2:	18c0      	adds	r0, r0, r3
 80007d4:	e64d      	b.n	8000472 <__aeabi_ddiv+0x1ce>
 80007d6:	428a      	cmp	r2, r1
 80007d8:	d800      	bhi.n	80007dc <__aeabi_ddiv+0x538>
 80007da:	e60e      	b.n	80003fa <__aeabi_ddiv+0x156>
 80007dc:	1e83      	subs	r3, r0, #2
 80007de:	1909      	adds	r1, r1, r4
 80007e0:	e60b      	b.n	80003fa <__aeabi_ddiv+0x156>
 80007e2:	428a      	cmp	r2, r1
 80007e4:	d800      	bhi.n	80007e8 <__aeabi_ddiv+0x544>
 80007e6:	e5f4      	b.n	80003d2 <__aeabi_ddiv+0x12e>
 80007e8:	1e83      	subs	r3, r0, #2
 80007ea:	4698      	mov	r8, r3
 80007ec:	1909      	adds	r1, r1, r4
 80007ee:	e5f0      	b.n	80003d2 <__aeabi_ddiv+0x12e>
 80007f0:	4925      	ldr	r1, [pc, #148]	; (8000888 <__aeabi_ddiv+0x5e4>)
 80007f2:	0028      	movs	r0, r5
 80007f4:	4459      	add	r1, fp
 80007f6:	408d      	lsls	r5, r1
 80007f8:	4642      	mov	r2, r8
 80007fa:	408a      	lsls	r2, r1
 80007fc:	1e69      	subs	r1, r5, #1
 80007fe:	418d      	sbcs	r5, r1
 8000800:	4641      	mov	r1, r8
 8000802:	40d8      	lsrs	r0, r3
 8000804:	40d9      	lsrs	r1, r3
 8000806:	4302      	orrs	r2, r0
 8000808:	432a      	orrs	r2, r5
 800080a:	000b      	movs	r3, r1
 800080c:	0751      	lsls	r1, r2, #29
 800080e:	d100      	bne.n	8000812 <__aeabi_ddiv+0x56e>
 8000810:	e751      	b.n	80006b6 <__aeabi_ddiv+0x412>
 8000812:	210f      	movs	r1, #15
 8000814:	4011      	ands	r1, r2
 8000816:	2904      	cmp	r1, #4
 8000818:	d000      	beq.n	800081c <__aeabi_ddiv+0x578>
 800081a:	e746      	b.n	80006aa <__aeabi_ddiv+0x406>
 800081c:	e74b      	b.n	80006b6 <__aeabi_ddiv+0x412>
 800081e:	0005      	movs	r5, r0
 8000820:	428e      	cmp	r6, r1
 8000822:	d000      	beq.n	8000826 <__aeabi_ddiv+0x582>
 8000824:	e66a      	b.n	80004fc <__aeabi_ddiv+0x258>
 8000826:	9a00      	ldr	r2, [sp, #0]
 8000828:	4293      	cmp	r3, r2
 800082a:	d000      	beq.n	800082e <__aeabi_ddiv+0x58a>
 800082c:	e666      	b.n	80004fc <__aeabi_ddiv+0x258>
 800082e:	e667      	b.n	8000500 <__aeabi_ddiv+0x25c>
 8000830:	4a16      	ldr	r2, [pc, #88]	; (800088c <__aeabi_ddiv+0x5e8>)
 8000832:	445a      	add	r2, fp
 8000834:	2a00      	cmp	r2, #0
 8000836:	dc00      	bgt.n	800083a <__aeabi_ddiv+0x596>
 8000838:	e710      	b.n	800065c <__aeabi_ddiv+0x3b8>
 800083a:	2301      	movs	r3, #1
 800083c:	2500      	movs	r5, #0
 800083e:	4498      	add	r8, r3
 8000840:	e667      	b.n	8000512 <__aeabi_ddiv+0x26e>
 8000842:	075d      	lsls	r5, r3, #29
 8000844:	025b      	lsls	r3, r3, #9
 8000846:	0b1c      	lsrs	r4, r3, #12
 8000848:	08d2      	lsrs	r2, r2, #3
 800084a:	2300      	movs	r3, #0
 800084c:	4315      	orrs	r5, r2
 800084e:	e580      	b.n	8000352 <__aeabi_ddiv+0xae>
 8000850:	9800      	ldr	r0, [sp, #0]
 8000852:	3d02      	subs	r5, #2
 8000854:	0042      	lsls	r2, r0, #1
 8000856:	4282      	cmp	r2, r0
 8000858:	41bf      	sbcs	r7, r7
 800085a:	427f      	negs	r7, r7
 800085c:	193c      	adds	r4, r7, r4
 800085e:	1936      	adds	r6, r6, r4
 8000860:	9200      	str	r2, [sp, #0]
 8000862:	e7dd      	b.n	8000820 <__aeabi_ddiv+0x57c>
 8000864:	2480      	movs	r4, #128	; 0x80
 8000866:	4643      	mov	r3, r8
 8000868:	0324      	lsls	r4, r4, #12
 800086a:	431c      	orrs	r4, r3
 800086c:	0324      	lsls	r4, r4, #12
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <__aeabi_ddiv+0x5dc>)
 8000870:	0b24      	lsrs	r4, r4, #12
 8000872:	e56e      	b.n	8000352 <__aeabi_ddiv+0xae>
 8000874:	9a00      	ldr	r2, [sp, #0]
 8000876:	429a      	cmp	r2, r3
 8000878:	d3ea      	bcc.n	8000850 <__aeabi_ddiv+0x5ac>
 800087a:	0005      	movs	r5, r0
 800087c:	e7d3      	b.n	8000826 <__aeabi_ddiv+0x582>
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	000007ff 	.word	0x000007ff
 8000884:	0000043e 	.word	0x0000043e
 8000888:	0000041e 	.word	0x0000041e
 800088c:	000003ff 	.word	0x000003ff

08000890 <__aeabi_dmul>:
 8000890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000892:	4657      	mov	r7, sl
 8000894:	464e      	mov	r6, r9
 8000896:	4645      	mov	r5, r8
 8000898:	46de      	mov	lr, fp
 800089a:	b5e0      	push	{r5, r6, r7, lr}
 800089c:	4698      	mov	r8, r3
 800089e:	030c      	lsls	r4, r1, #12
 80008a0:	004b      	lsls	r3, r1, #1
 80008a2:	0006      	movs	r6, r0
 80008a4:	4692      	mov	sl, r2
 80008a6:	b087      	sub	sp, #28
 80008a8:	0b24      	lsrs	r4, r4, #12
 80008aa:	0d5b      	lsrs	r3, r3, #21
 80008ac:	0fcf      	lsrs	r7, r1, #31
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d100      	bne.n	80008b4 <__aeabi_dmul+0x24>
 80008b2:	e15c      	b.n	8000b6e <__aeabi_dmul+0x2de>
 80008b4:	4ad9      	ldr	r2, [pc, #868]	; (8000c1c <__aeabi_dmul+0x38c>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d100      	bne.n	80008bc <__aeabi_dmul+0x2c>
 80008ba:	e175      	b.n	8000ba8 <__aeabi_dmul+0x318>
 80008bc:	0f42      	lsrs	r2, r0, #29
 80008be:	00e4      	lsls	r4, r4, #3
 80008c0:	4314      	orrs	r4, r2
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	0412      	lsls	r2, r2, #16
 80008c6:	4314      	orrs	r4, r2
 80008c8:	4ad5      	ldr	r2, [pc, #852]	; (8000c20 <__aeabi_dmul+0x390>)
 80008ca:	00c5      	lsls	r5, r0, #3
 80008cc:	4694      	mov	ip, r2
 80008ce:	4463      	add	r3, ip
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	2300      	movs	r3, #0
 80008d4:	4699      	mov	r9, r3
 80008d6:	469b      	mov	fp, r3
 80008d8:	4643      	mov	r3, r8
 80008da:	4642      	mov	r2, r8
 80008dc:	031e      	lsls	r6, r3, #12
 80008de:	0fd2      	lsrs	r2, r2, #31
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	4650      	mov	r0, sl
 80008e4:	4690      	mov	r8, r2
 80008e6:	0b36      	lsrs	r6, r6, #12
 80008e8:	0d5b      	lsrs	r3, r3, #21
 80008ea:	d100      	bne.n	80008ee <__aeabi_dmul+0x5e>
 80008ec:	e120      	b.n	8000b30 <__aeabi_dmul+0x2a0>
 80008ee:	4acb      	ldr	r2, [pc, #812]	; (8000c1c <__aeabi_dmul+0x38c>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d100      	bne.n	80008f6 <__aeabi_dmul+0x66>
 80008f4:	e162      	b.n	8000bbc <__aeabi_dmul+0x32c>
 80008f6:	49ca      	ldr	r1, [pc, #808]	; (8000c20 <__aeabi_dmul+0x390>)
 80008f8:	0f42      	lsrs	r2, r0, #29
 80008fa:	468c      	mov	ip, r1
 80008fc:	9900      	ldr	r1, [sp, #0]
 80008fe:	4463      	add	r3, ip
 8000900:	00f6      	lsls	r6, r6, #3
 8000902:	468c      	mov	ip, r1
 8000904:	4316      	orrs	r6, r2
 8000906:	2280      	movs	r2, #128	; 0x80
 8000908:	449c      	add	ip, r3
 800090a:	0412      	lsls	r2, r2, #16
 800090c:	4663      	mov	r3, ip
 800090e:	4316      	orrs	r6, r2
 8000910:	00c2      	lsls	r2, r0, #3
 8000912:	2000      	movs	r0, #0
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	9900      	ldr	r1, [sp, #0]
 8000918:	4643      	mov	r3, r8
 800091a:	3101      	adds	r1, #1
 800091c:	468c      	mov	ip, r1
 800091e:	4649      	mov	r1, r9
 8000920:	407b      	eors	r3, r7
 8000922:	9301      	str	r3, [sp, #4]
 8000924:	290f      	cmp	r1, #15
 8000926:	d826      	bhi.n	8000976 <__aeabi_dmul+0xe6>
 8000928:	4bbe      	ldr	r3, [pc, #760]	; (8000c24 <__aeabi_dmul+0x394>)
 800092a:	0089      	lsls	r1, r1, #2
 800092c:	5859      	ldr	r1, [r3, r1]
 800092e:	468f      	mov	pc, r1
 8000930:	4643      	mov	r3, r8
 8000932:	9301      	str	r3, [sp, #4]
 8000934:	0034      	movs	r4, r6
 8000936:	0015      	movs	r5, r2
 8000938:	4683      	mov	fp, r0
 800093a:	465b      	mov	r3, fp
 800093c:	2b02      	cmp	r3, #2
 800093e:	d016      	beq.n	800096e <__aeabi_dmul+0xde>
 8000940:	2b03      	cmp	r3, #3
 8000942:	d100      	bne.n	8000946 <__aeabi_dmul+0xb6>
 8000944:	e203      	b.n	8000d4e <__aeabi_dmul+0x4be>
 8000946:	2b01      	cmp	r3, #1
 8000948:	d000      	beq.n	800094c <__aeabi_dmul+0xbc>
 800094a:	e0cd      	b.n	8000ae8 <__aeabi_dmul+0x258>
 800094c:	2200      	movs	r2, #0
 800094e:	2400      	movs	r4, #0
 8000950:	2500      	movs	r5, #0
 8000952:	9b01      	ldr	r3, [sp, #4]
 8000954:	0512      	lsls	r2, r2, #20
 8000956:	4322      	orrs	r2, r4
 8000958:	07db      	lsls	r3, r3, #31
 800095a:	431a      	orrs	r2, r3
 800095c:	0028      	movs	r0, r5
 800095e:	0011      	movs	r1, r2
 8000960:	b007      	add	sp, #28
 8000962:	bcf0      	pop	{r4, r5, r6, r7}
 8000964:	46bb      	mov	fp, r7
 8000966:	46b2      	mov	sl, r6
 8000968:	46a9      	mov	r9, r5
 800096a:	46a0      	mov	r8, r4
 800096c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800096e:	2400      	movs	r4, #0
 8000970:	2500      	movs	r5, #0
 8000972:	4aaa      	ldr	r2, [pc, #680]	; (8000c1c <__aeabi_dmul+0x38c>)
 8000974:	e7ed      	b.n	8000952 <__aeabi_dmul+0xc2>
 8000976:	0c28      	lsrs	r0, r5, #16
 8000978:	042d      	lsls	r5, r5, #16
 800097a:	0c2d      	lsrs	r5, r5, #16
 800097c:	002b      	movs	r3, r5
 800097e:	0c11      	lsrs	r1, r2, #16
 8000980:	0412      	lsls	r2, r2, #16
 8000982:	0c12      	lsrs	r2, r2, #16
 8000984:	4353      	muls	r3, r2
 8000986:	4698      	mov	r8, r3
 8000988:	0013      	movs	r3, r2
 800098a:	002f      	movs	r7, r5
 800098c:	4343      	muls	r3, r0
 800098e:	4699      	mov	r9, r3
 8000990:	434f      	muls	r7, r1
 8000992:	444f      	add	r7, r9
 8000994:	46bb      	mov	fp, r7
 8000996:	4647      	mov	r7, r8
 8000998:	000b      	movs	r3, r1
 800099a:	0c3f      	lsrs	r7, r7, #16
 800099c:	46ba      	mov	sl, r7
 800099e:	4343      	muls	r3, r0
 80009a0:	44da      	add	sl, fp
 80009a2:	9302      	str	r3, [sp, #8]
 80009a4:	45d1      	cmp	r9, sl
 80009a6:	d904      	bls.n	80009b2 <__aeabi_dmul+0x122>
 80009a8:	2780      	movs	r7, #128	; 0x80
 80009aa:	027f      	lsls	r7, r7, #9
 80009ac:	46b9      	mov	r9, r7
 80009ae:	444b      	add	r3, r9
 80009b0:	9302      	str	r3, [sp, #8]
 80009b2:	4653      	mov	r3, sl
 80009b4:	0c1b      	lsrs	r3, r3, #16
 80009b6:	469b      	mov	fp, r3
 80009b8:	4653      	mov	r3, sl
 80009ba:	041f      	lsls	r7, r3, #16
 80009bc:	4643      	mov	r3, r8
 80009be:	041b      	lsls	r3, r3, #16
 80009c0:	0c1b      	lsrs	r3, r3, #16
 80009c2:	4698      	mov	r8, r3
 80009c4:	003b      	movs	r3, r7
 80009c6:	4443      	add	r3, r8
 80009c8:	9304      	str	r3, [sp, #16]
 80009ca:	0c33      	lsrs	r3, r6, #16
 80009cc:	0436      	lsls	r6, r6, #16
 80009ce:	0c36      	lsrs	r6, r6, #16
 80009d0:	4698      	mov	r8, r3
 80009d2:	0033      	movs	r3, r6
 80009d4:	4343      	muls	r3, r0
 80009d6:	4699      	mov	r9, r3
 80009d8:	4643      	mov	r3, r8
 80009da:	4343      	muls	r3, r0
 80009dc:	002f      	movs	r7, r5
 80009de:	469a      	mov	sl, r3
 80009e0:	4643      	mov	r3, r8
 80009e2:	4377      	muls	r7, r6
 80009e4:	435d      	muls	r5, r3
 80009e6:	0c38      	lsrs	r0, r7, #16
 80009e8:	444d      	add	r5, r9
 80009ea:	1945      	adds	r5, r0, r5
 80009ec:	45a9      	cmp	r9, r5
 80009ee:	d903      	bls.n	80009f8 <__aeabi_dmul+0x168>
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	025b      	lsls	r3, r3, #9
 80009f4:	4699      	mov	r9, r3
 80009f6:	44ca      	add	sl, r9
 80009f8:	043f      	lsls	r7, r7, #16
 80009fa:	0c28      	lsrs	r0, r5, #16
 80009fc:	0c3f      	lsrs	r7, r7, #16
 80009fe:	042d      	lsls	r5, r5, #16
 8000a00:	19ed      	adds	r5, r5, r7
 8000a02:	0c27      	lsrs	r7, r4, #16
 8000a04:	0424      	lsls	r4, r4, #16
 8000a06:	0c24      	lsrs	r4, r4, #16
 8000a08:	0003      	movs	r3, r0
 8000a0a:	0020      	movs	r0, r4
 8000a0c:	4350      	muls	r0, r2
 8000a0e:	437a      	muls	r2, r7
 8000a10:	4691      	mov	r9, r2
 8000a12:	003a      	movs	r2, r7
 8000a14:	4453      	add	r3, sl
 8000a16:	9305      	str	r3, [sp, #20]
 8000a18:	0c03      	lsrs	r3, r0, #16
 8000a1a:	469a      	mov	sl, r3
 8000a1c:	434a      	muls	r2, r1
 8000a1e:	4361      	muls	r1, r4
 8000a20:	4449      	add	r1, r9
 8000a22:	4451      	add	r1, sl
 8000a24:	44ab      	add	fp, r5
 8000a26:	4589      	cmp	r9, r1
 8000a28:	d903      	bls.n	8000a32 <__aeabi_dmul+0x1a2>
 8000a2a:	2380      	movs	r3, #128	; 0x80
 8000a2c:	025b      	lsls	r3, r3, #9
 8000a2e:	4699      	mov	r9, r3
 8000a30:	444a      	add	r2, r9
 8000a32:	0400      	lsls	r0, r0, #16
 8000a34:	0c0b      	lsrs	r3, r1, #16
 8000a36:	0c00      	lsrs	r0, r0, #16
 8000a38:	0409      	lsls	r1, r1, #16
 8000a3a:	1809      	adds	r1, r1, r0
 8000a3c:	0020      	movs	r0, r4
 8000a3e:	4699      	mov	r9, r3
 8000a40:	4643      	mov	r3, r8
 8000a42:	4370      	muls	r0, r6
 8000a44:	435c      	muls	r4, r3
 8000a46:	437e      	muls	r6, r7
 8000a48:	435f      	muls	r7, r3
 8000a4a:	0c03      	lsrs	r3, r0, #16
 8000a4c:	4698      	mov	r8, r3
 8000a4e:	19a4      	adds	r4, r4, r6
 8000a50:	4444      	add	r4, r8
 8000a52:	444a      	add	r2, r9
 8000a54:	9703      	str	r7, [sp, #12]
 8000a56:	42a6      	cmp	r6, r4
 8000a58:	d904      	bls.n	8000a64 <__aeabi_dmul+0x1d4>
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	025b      	lsls	r3, r3, #9
 8000a5e:	4698      	mov	r8, r3
 8000a60:	4447      	add	r7, r8
 8000a62:	9703      	str	r7, [sp, #12]
 8000a64:	0423      	lsls	r3, r4, #16
 8000a66:	9e02      	ldr	r6, [sp, #8]
 8000a68:	469a      	mov	sl, r3
 8000a6a:	9b05      	ldr	r3, [sp, #20]
 8000a6c:	445e      	add	r6, fp
 8000a6e:	4698      	mov	r8, r3
 8000a70:	42ae      	cmp	r6, r5
 8000a72:	41ad      	sbcs	r5, r5
 8000a74:	1876      	adds	r6, r6, r1
 8000a76:	428e      	cmp	r6, r1
 8000a78:	4189      	sbcs	r1, r1
 8000a7a:	0400      	lsls	r0, r0, #16
 8000a7c:	0c00      	lsrs	r0, r0, #16
 8000a7e:	4450      	add	r0, sl
 8000a80:	4440      	add	r0, r8
 8000a82:	426d      	negs	r5, r5
 8000a84:	1947      	adds	r7, r0, r5
 8000a86:	46b8      	mov	r8, r7
 8000a88:	4693      	mov	fp, r2
 8000a8a:	4249      	negs	r1, r1
 8000a8c:	4689      	mov	r9, r1
 8000a8e:	44c3      	add	fp, r8
 8000a90:	44d9      	add	r9, fp
 8000a92:	4298      	cmp	r0, r3
 8000a94:	4180      	sbcs	r0, r0
 8000a96:	45a8      	cmp	r8, r5
 8000a98:	41ad      	sbcs	r5, r5
 8000a9a:	4593      	cmp	fp, r2
 8000a9c:	4192      	sbcs	r2, r2
 8000a9e:	4589      	cmp	r9, r1
 8000aa0:	4189      	sbcs	r1, r1
 8000aa2:	426d      	negs	r5, r5
 8000aa4:	4240      	negs	r0, r0
 8000aa6:	4328      	orrs	r0, r5
 8000aa8:	0c24      	lsrs	r4, r4, #16
 8000aaa:	4252      	negs	r2, r2
 8000aac:	4249      	negs	r1, r1
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	9b03      	ldr	r3, [sp, #12]
 8000ab2:	1900      	adds	r0, r0, r4
 8000ab4:	1880      	adds	r0, r0, r2
 8000ab6:	18c7      	adds	r7, r0, r3
 8000ab8:	464b      	mov	r3, r9
 8000aba:	0ddc      	lsrs	r4, r3, #23
 8000abc:	9b04      	ldr	r3, [sp, #16]
 8000abe:	0275      	lsls	r5, r6, #9
 8000ac0:	431d      	orrs	r5, r3
 8000ac2:	1e6a      	subs	r2, r5, #1
 8000ac4:	4195      	sbcs	r5, r2
 8000ac6:	464b      	mov	r3, r9
 8000ac8:	0df6      	lsrs	r6, r6, #23
 8000aca:	027f      	lsls	r7, r7, #9
 8000acc:	4335      	orrs	r5, r6
 8000ace:	025a      	lsls	r2, r3, #9
 8000ad0:	433c      	orrs	r4, r7
 8000ad2:	4315      	orrs	r5, r2
 8000ad4:	01fb      	lsls	r3, r7, #7
 8000ad6:	d400      	bmi.n	8000ada <__aeabi_dmul+0x24a>
 8000ad8:	e11c      	b.n	8000d14 <__aeabi_dmul+0x484>
 8000ada:	2101      	movs	r1, #1
 8000adc:	086a      	lsrs	r2, r5, #1
 8000ade:	400d      	ands	r5, r1
 8000ae0:	4315      	orrs	r5, r2
 8000ae2:	07e2      	lsls	r2, r4, #31
 8000ae4:	4315      	orrs	r5, r2
 8000ae6:	0864      	lsrs	r4, r4, #1
 8000ae8:	494f      	ldr	r1, [pc, #316]	; (8000c28 <__aeabi_dmul+0x398>)
 8000aea:	4461      	add	r1, ip
 8000aec:	2900      	cmp	r1, #0
 8000aee:	dc00      	bgt.n	8000af2 <__aeabi_dmul+0x262>
 8000af0:	e0b0      	b.n	8000c54 <__aeabi_dmul+0x3c4>
 8000af2:	076b      	lsls	r3, r5, #29
 8000af4:	d009      	beq.n	8000b0a <__aeabi_dmul+0x27a>
 8000af6:	220f      	movs	r2, #15
 8000af8:	402a      	ands	r2, r5
 8000afa:	2a04      	cmp	r2, #4
 8000afc:	d005      	beq.n	8000b0a <__aeabi_dmul+0x27a>
 8000afe:	1d2a      	adds	r2, r5, #4
 8000b00:	42aa      	cmp	r2, r5
 8000b02:	41ad      	sbcs	r5, r5
 8000b04:	426d      	negs	r5, r5
 8000b06:	1964      	adds	r4, r4, r5
 8000b08:	0015      	movs	r5, r2
 8000b0a:	01e3      	lsls	r3, r4, #7
 8000b0c:	d504      	bpl.n	8000b18 <__aeabi_dmul+0x288>
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	4a46      	ldr	r2, [pc, #280]	; (8000c2c <__aeabi_dmul+0x39c>)
 8000b12:	00c9      	lsls	r1, r1, #3
 8000b14:	4014      	ands	r4, r2
 8000b16:	4461      	add	r1, ip
 8000b18:	4a45      	ldr	r2, [pc, #276]	; (8000c30 <__aeabi_dmul+0x3a0>)
 8000b1a:	4291      	cmp	r1, r2
 8000b1c:	dd00      	ble.n	8000b20 <__aeabi_dmul+0x290>
 8000b1e:	e726      	b.n	800096e <__aeabi_dmul+0xde>
 8000b20:	0762      	lsls	r2, r4, #29
 8000b22:	08ed      	lsrs	r5, r5, #3
 8000b24:	0264      	lsls	r4, r4, #9
 8000b26:	0549      	lsls	r1, r1, #21
 8000b28:	4315      	orrs	r5, r2
 8000b2a:	0b24      	lsrs	r4, r4, #12
 8000b2c:	0d4a      	lsrs	r2, r1, #21
 8000b2e:	e710      	b.n	8000952 <__aeabi_dmul+0xc2>
 8000b30:	4652      	mov	r2, sl
 8000b32:	4332      	orrs	r2, r6
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dmul+0x2a8>
 8000b36:	e07f      	b.n	8000c38 <__aeabi_dmul+0x3a8>
 8000b38:	2e00      	cmp	r6, #0
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_dmul+0x2ae>
 8000b3c:	e0dc      	b.n	8000cf8 <__aeabi_dmul+0x468>
 8000b3e:	0030      	movs	r0, r6
 8000b40:	f000 fd74 	bl	800162c <__clzsi2>
 8000b44:	0002      	movs	r2, r0
 8000b46:	3a0b      	subs	r2, #11
 8000b48:	231d      	movs	r3, #29
 8000b4a:	0001      	movs	r1, r0
 8000b4c:	1a9b      	subs	r3, r3, r2
 8000b4e:	4652      	mov	r2, sl
 8000b50:	3908      	subs	r1, #8
 8000b52:	40da      	lsrs	r2, r3
 8000b54:	408e      	lsls	r6, r1
 8000b56:	4316      	orrs	r6, r2
 8000b58:	4652      	mov	r2, sl
 8000b5a:	408a      	lsls	r2, r1
 8000b5c:	9b00      	ldr	r3, [sp, #0]
 8000b5e:	4935      	ldr	r1, [pc, #212]	; (8000c34 <__aeabi_dmul+0x3a4>)
 8000b60:	1a18      	subs	r0, r3, r0
 8000b62:	0003      	movs	r3, r0
 8000b64:	468c      	mov	ip, r1
 8000b66:	4463      	add	r3, ip
 8000b68:	2000      	movs	r0, #0
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	e6d3      	b.n	8000916 <__aeabi_dmul+0x86>
 8000b6e:	0025      	movs	r5, r4
 8000b70:	4305      	orrs	r5, r0
 8000b72:	d04a      	beq.n	8000c0a <__aeabi_dmul+0x37a>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d100      	bne.n	8000b7a <__aeabi_dmul+0x2ea>
 8000b78:	e0b0      	b.n	8000cdc <__aeabi_dmul+0x44c>
 8000b7a:	0020      	movs	r0, r4
 8000b7c:	f000 fd56 	bl	800162c <__clzsi2>
 8000b80:	0001      	movs	r1, r0
 8000b82:	0002      	movs	r2, r0
 8000b84:	390b      	subs	r1, #11
 8000b86:	231d      	movs	r3, #29
 8000b88:	0010      	movs	r0, r2
 8000b8a:	1a5b      	subs	r3, r3, r1
 8000b8c:	0031      	movs	r1, r6
 8000b8e:	0035      	movs	r5, r6
 8000b90:	3808      	subs	r0, #8
 8000b92:	4084      	lsls	r4, r0
 8000b94:	40d9      	lsrs	r1, r3
 8000b96:	4085      	lsls	r5, r0
 8000b98:	430c      	orrs	r4, r1
 8000b9a:	4826      	ldr	r0, [pc, #152]	; (8000c34 <__aeabi_dmul+0x3a4>)
 8000b9c:	1a83      	subs	r3, r0, r2
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4699      	mov	r9, r3
 8000ba4:	469b      	mov	fp, r3
 8000ba6:	e697      	b.n	80008d8 <__aeabi_dmul+0x48>
 8000ba8:	0005      	movs	r5, r0
 8000baa:	4325      	orrs	r5, r4
 8000bac:	d126      	bne.n	8000bfc <__aeabi_dmul+0x36c>
 8000bae:	2208      	movs	r2, #8
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	2400      	movs	r4, #0
 8000bb6:	4691      	mov	r9, r2
 8000bb8:	469b      	mov	fp, r3
 8000bba:	e68d      	b.n	80008d8 <__aeabi_dmul+0x48>
 8000bbc:	4652      	mov	r2, sl
 8000bbe:	9b00      	ldr	r3, [sp, #0]
 8000bc0:	4332      	orrs	r2, r6
 8000bc2:	d110      	bne.n	8000be6 <__aeabi_dmul+0x356>
 8000bc4:	4915      	ldr	r1, [pc, #84]	; (8000c1c <__aeabi_dmul+0x38c>)
 8000bc6:	2600      	movs	r6, #0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	4463      	add	r3, ip
 8000bcc:	4649      	mov	r1, r9
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	4319      	orrs	r1, r3
 8000bd4:	4689      	mov	r9, r1
 8000bd6:	2002      	movs	r0, #2
 8000bd8:	e69d      	b.n	8000916 <__aeabi_dmul+0x86>
 8000bda:	465b      	mov	r3, fp
 8000bdc:	9701      	str	r7, [sp, #4]
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d000      	beq.n	8000be4 <__aeabi_dmul+0x354>
 8000be2:	e6ad      	b.n	8000940 <__aeabi_dmul+0xb0>
 8000be4:	e6c3      	b.n	800096e <__aeabi_dmul+0xde>
 8000be6:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <__aeabi_dmul+0x38c>)
 8000be8:	2003      	movs	r0, #3
 8000bea:	4694      	mov	ip, r2
 8000bec:	4463      	add	r3, ip
 8000bee:	464a      	mov	r2, r9
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	4691      	mov	r9, r2
 8000bf8:	4652      	mov	r2, sl
 8000bfa:	e68c      	b.n	8000916 <__aeabi_dmul+0x86>
 8000bfc:	220c      	movs	r2, #12
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2303      	movs	r3, #3
 8000c02:	0005      	movs	r5, r0
 8000c04:	4691      	mov	r9, r2
 8000c06:	469b      	mov	fp, r3
 8000c08:	e666      	b.n	80008d8 <__aeabi_dmul+0x48>
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	4699      	mov	r9, r3
 8000c0e:	2300      	movs	r3, #0
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	3301      	adds	r3, #1
 8000c14:	2400      	movs	r4, #0
 8000c16:	469b      	mov	fp, r3
 8000c18:	e65e      	b.n	80008d8 <__aeabi_dmul+0x48>
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	000007ff 	.word	0x000007ff
 8000c20:	fffffc01 	.word	0xfffffc01
 8000c24:	0800271c 	.word	0x0800271c
 8000c28:	000003ff 	.word	0x000003ff
 8000c2c:	feffffff 	.word	0xfeffffff
 8000c30:	000007fe 	.word	0x000007fe
 8000c34:	fffffc0d 	.word	0xfffffc0d
 8000c38:	4649      	mov	r1, r9
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	4319      	orrs	r1, r3
 8000c3e:	4689      	mov	r9, r1
 8000c40:	2600      	movs	r6, #0
 8000c42:	2001      	movs	r0, #1
 8000c44:	e667      	b.n	8000916 <__aeabi_dmul+0x86>
 8000c46:	2300      	movs	r3, #0
 8000c48:	2480      	movs	r4, #128	; 0x80
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	4a43      	ldr	r2, [pc, #268]	; (8000d5c <__aeabi_dmul+0x4cc>)
 8000c4e:	9301      	str	r3, [sp, #4]
 8000c50:	0324      	lsls	r4, r4, #12
 8000c52:	e67e      	b.n	8000952 <__aeabi_dmul+0xc2>
 8000c54:	2001      	movs	r0, #1
 8000c56:	1a40      	subs	r0, r0, r1
 8000c58:	2838      	cmp	r0, #56	; 0x38
 8000c5a:	dd00      	ble.n	8000c5e <__aeabi_dmul+0x3ce>
 8000c5c:	e676      	b.n	800094c <__aeabi_dmul+0xbc>
 8000c5e:	281f      	cmp	r0, #31
 8000c60:	dd5b      	ble.n	8000d1a <__aeabi_dmul+0x48a>
 8000c62:	221f      	movs	r2, #31
 8000c64:	0023      	movs	r3, r4
 8000c66:	4252      	negs	r2, r2
 8000c68:	1a51      	subs	r1, r2, r1
 8000c6a:	40cb      	lsrs	r3, r1
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	2820      	cmp	r0, #32
 8000c70:	d003      	beq.n	8000c7a <__aeabi_dmul+0x3ea>
 8000c72:	4a3b      	ldr	r2, [pc, #236]	; (8000d60 <__aeabi_dmul+0x4d0>)
 8000c74:	4462      	add	r2, ip
 8000c76:	4094      	lsls	r4, r2
 8000c78:	4325      	orrs	r5, r4
 8000c7a:	1e6a      	subs	r2, r5, #1
 8000c7c:	4195      	sbcs	r5, r2
 8000c7e:	002a      	movs	r2, r5
 8000c80:	430a      	orrs	r2, r1
 8000c82:	2107      	movs	r1, #7
 8000c84:	000d      	movs	r5, r1
 8000c86:	2400      	movs	r4, #0
 8000c88:	4015      	ands	r5, r2
 8000c8a:	4211      	tst	r1, r2
 8000c8c:	d05b      	beq.n	8000d46 <__aeabi_dmul+0x4b6>
 8000c8e:	210f      	movs	r1, #15
 8000c90:	2400      	movs	r4, #0
 8000c92:	4011      	ands	r1, r2
 8000c94:	2904      	cmp	r1, #4
 8000c96:	d053      	beq.n	8000d40 <__aeabi_dmul+0x4b0>
 8000c98:	1d11      	adds	r1, r2, #4
 8000c9a:	4291      	cmp	r1, r2
 8000c9c:	4192      	sbcs	r2, r2
 8000c9e:	4252      	negs	r2, r2
 8000ca0:	18a4      	adds	r4, r4, r2
 8000ca2:	000a      	movs	r2, r1
 8000ca4:	0223      	lsls	r3, r4, #8
 8000ca6:	d54b      	bpl.n	8000d40 <__aeabi_dmul+0x4b0>
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2400      	movs	r4, #0
 8000cac:	2500      	movs	r5, #0
 8000cae:	e650      	b.n	8000952 <__aeabi_dmul+0xc2>
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	031b      	lsls	r3, r3, #12
 8000cb4:	421c      	tst	r4, r3
 8000cb6:	d009      	beq.n	8000ccc <__aeabi_dmul+0x43c>
 8000cb8:	421e      	tst	r6, r3
 8000cba:	d107      	bne.n	8000ccc <__aeabi_dmul+0x43c>
 8000cbc:	4333      	orrs	r3, r6
 8000cbe:	031c      	lsls	r4, r3, #12
 8000cc0:	4643      	mov	r3, r8
 8000cc2:	0015      	movs	r5, r2
 8000cc4:	0b24      	lsrs	r4, r4, #12
 8000cc6:	4a25      	ldr	r2, [pc, #148]	; (8000d5c <__aeabi_dmul+0x4cc>)
 8000cc8:	9301      	str	r3, [sp, #4]
 8000cca:	e642      	b.n	8000952 <__aeabi_dmul+0xc2>
 8000ccc:	2280      	movs	r2, #128	; 0x80
 8000cce:	0312      	lsls	r2, r2, #12
 8000cd0:	4314      	orrs	r4, r2
 8000cd2:	0324      	lsls	r4, r4, #12
 8000cd4:	4a21      	ldr	r2, [pc, #132]	; (8000d5c <__aeabi_dmul+0x4cc>)
 8000cd6:	0b24      	lsrs	r4, r4, #12
 8000cd8:	9701      	str	r7, [sp, #4]
 8000cda:	e63a      	b.n	8000952 <__aeabi_dmul+0xc2>
 8000cdc:	f000 fca6 	bl	800162c <__clzsi2>
 8000ce0:	0001      	movs	r1, r0
 8000ce2:	0002      	movs	r2, r0
 8000ce4:	3115      	adds	r1, #21
 8000ce6:	3220      	adds	r2, #32
 8000ce8:	291c      	cmp	r1, #28
 8000cea:	dc00      	bgt.n	8000cee <__aeabi_dmul+0x45e>
 8000cec:	e74b      	b.n	8000b86 <__aeabi_dmul+0x2f6>
 8000cee:	0034      	movs	r4, r6
 8000cf0:	3808      	subs	r0, #8
 8000cf2:	2500      	movs	r5, #0
 8000cf4:	4084      	lsls	r4, r0
 8000cf6:	e750      	b.n	8000b9a <__aeabi_dmul+0x30a>
 8000cf8:	f000 fc98 	bl	800162c <__clzsi2>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	001a      	movs	r2, r3
 8000d00:	3215      	adds	r2, #21
 8000d02:	3020      	adds	r0, #32
 8000d04:	2a1c      	cmp	r2, #28
 8000d06:	dc00      	bgt.n	8000d0a <__aeabi_dmul+0x47a>
 8000d08:	e71e      	b.n	8000b48 <__aeabi_dmul+0x2b8>
 8000d0a:	4656      	mov	r6, sl
 8000d0c:	3b08      	subs	r3, #8
 8000d0e:	2200      	movs	r2, #0
 8000d10:	409e      	lsls	r6, r3
 8000d12:	e723      	b.n	8000b5c <__aeabi_dmul+0x2cc>
 8000d14:	9b00      	ldr	r3, [sp, #0]
 8000d16:	469c      	mov	ip, r3
 8000d18:	e6e6      	b.n	8000ae8 <__aeabi_dmul+0x258>
 8000d1a:	4912      	ldr	r1, [pc, #72]	; (8000d64 <__aeabi_dmul+0x4d4>)
 8000d1c:	0022      	movs	r2, r4
 8000d1e:	4461      	add	r1, ip
 8000d20:	002e      	movs	r6, r5
 8000d22:	408d      	lsls	r5, r1
 8000d24:	408a      	lsls	r2, r1
 8000d26:	40c6      	lsrs	r6, r0
 8000d28:	1e69      	subs	r1, r5, #1
 8000d2a:	418d      	sbcs	r5, r1
 8000d2c:	4332      	orrs	r2, r6
 8000d2e:	432a      	orrs	r2, r5
 8000d30:	40c4      	lsrs	r4, r0
 8000d32:	0753      	lsls	r3, r2, #29
 8000d34:	d0b6      	beq.n	8000ca4 <__aeabi_dmul+0x414>
 8000d36:	210f      	movs	r1, #15
 8000d38:	4011      	ands	r1, r2
 8000d3a:	2904      	cmp	r1, #4
 8000d3c:	d1ac      	bne.n	8000c98 <__aeabi_dmul+0x408>
 8000d3e:	e7b1      	b.n	8000ca4 <__aeabi_dmul+0x414>
 8000d40:	0765      	lsls	r5, r4, #29
 8000d42:	0264      	lsls	r4, r4, #9
 8000d44:	0b24      	lsrs	r4, r4, #12
 8000d46:	08d2      	lsrs	r2, r2, #3
 8000d48:	4315      	orrs	r5, r2
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	e601      	b.n	8000952 <__aeabi_dmul+0xc2>
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	0312      	lsls	r2, r2, #12
 8000d52:	4314      	orrs	r4, r2
 8000d54:	0324      	lsls	r4, r4, #12
 8000d56:	4a01      	ldr	r2, [pc, #4]	; (8000d5c <__aeabi_dmul+0x4cc>)
 8000d58:	0b24      	lsrs	r4, r4, #12
 8000d5a:	e5fa      	b.n	8000952 <__aeabi_dmul+0xc2>
 8000d5c:	000007ff 	.word	0x000007ff
 8000d60:	0000043e 	.word	0x0000043e
 8000d64:	0000041e 	.word	0x0000041e

08000d68 <__aeabi_dsub>:
 8000d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6a:	4657      	mov	r7, sl
 8000d6c:	464e      	mov	r6, r9
 8000d6e:	4645      	mov	r5, r8
 8000d70:	46de      	mov	lr, fp
 8000d72:	b5e0      	push	{r5, r6, r7, lr}
 8000d74:	001e      	movs	r6, r3
 8000d76:	0017      	movs	r7, r2
 8000d78:	004a      	lsls	r2, r1, #1
 8000d7a:	030b      	lsls	r3, r1, #12
 8000d7c:	0d52      	lsrs	r2, r2, #21
 8000d7e:	0a5b      	lsrs	r3, r3, #9
 8000d80:	4690      	mov	r8, r2
 8000d82:	0f42      	lsrs	r2, r0, #29
 8000d84:	431a      	orrs	r2, r3
 8000d86:	0fcd      	lsrs	r5, r1, #31
 8000d88:	4ccd      	ldr	r4, [pc, #820]	; (80010c0 <__aeabi_dsub+0x358>)
 8000d8a:	0331      	lsls	r1, r6, #12
 8000d8c:	00c3      	lsls	r3, r0, #3
 8000d8e:	4694      	mov	ip, r2
 8000d90:	0070      	lsls	r0, r6, #1
 8000d92:	0f7a      	lsrs	r2, r7, #29
 8000d94:	0a49      	lsrs	r1, r1, #9
 8000d96:	00ff      	lsls	r7, r7, #3
 8000d98:	469a      	mov	sl, r3
 8000d9a:	46b9      	mov	r9, r7
 8000d9c:	0d40      	lsrs	r0, r0, #21
 8000d9e:	0ff6      	lsrs	r6, r6, #31
 8000da0:	4311      	orrs	r1, r2
 8000da2:	42a0      	cmp	r0, r4
 8000da4:	d100      	bne.n	8000da8 <__aeabi_dsub+0x40>
 8000da6:	e0b1      	b.n	8000f0c <__aeabi_dsub+0x1a4>
 8000da8:	2201      	movs	r2, #1
 8000daa:	4056      	eors	r6, r2
 8000dac:	46b3      	mov	fp, r6
 8000dae:	42b5      	cmp	r5, r6
 8000db0:	d100      	bne.n	8000db4 <__aeabi_dsub+0x4c>
 8000db2:	e088      	b.n	8000ec6 <__aeabi_dsub+0x15e>
 8000db4:	4642      	mov	r2, r8
 8000db6:	1a12      	subs	r2, r2, r0
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	dc00      	bgt.n	8000dbe <__aeabi_dsub+0x56>
 8000dbc:	e0ae      	b.n	8000f1c <__aeabi_dsub+0x1b4>
 8000dbe:	2800      	cmp	r0, #0
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_dsub+0x5c>
 8000dc2:	e0c1      	b.n	8000f48 <__aeabi_dsub+0x1e0>
 8000dc4:	48be      	ldr	r0, [pc, #760]	; (80010c0 <__aeabi_dsub+0x358>)
 8000dc6:	4580      	cmp	r8, r0
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_dsub+0x64>
 8000dca:	e151      	b.n	8001070 <__aeabi_dsub+0x308>
 8000dcc:	2080      	movs	r0, #128	; 0x80
 8000dce:	0400      	lsls	r0, r0, #16
 8000dd0:	4301      	orrs	r1, r0
 8000dd2:	2a38      	cmp	r2, #56	; 0x38
 8000dd4:	dd00      	ble.n	8000dd8 <__aeabi_dsub+0x70>
 8000dd6:	e17b      	b.n	80010d0 <__aeabi_dsub+0x368>
 8000dd8:	2a1f      	cmp	r2, #31
 8000dda:	dd00      	ble.n	8000dde <__aeabi_dsub+0x76>
 8000ddc:	e1ee      	b.n	80011bc <__aeabi_dsub+0x454>
 8000dde:	2020      	movs	r0, #32
 8000de0:	003e      	movs	r6, r7
 8000de2:	1a80      	subs	r0, r0, r2
 8000de4:	000c      	movs	r4, r1
 8000de6:	40d6      	lsrs	r6, r2
 8000de8:	40d1      	lsrs	r1, r2
 8000dea:	4087      	lsls	r7, r0
 8000dec:	4662      	mov	r2, ip
 8000dee:	4084      	lsls	r4, r0
 8000df0:	1a52      	subs	r2, r2, r1
 8000df2:	1e78      	subs	r0, r7, #1
 8000df4:	4187      	sbcs	r7, r0
 8000df6:	4694      	mov	ip, r2
 8000df8:	4334      	orrs	r4, r6
 8000dfa:	4327      	orrs	r7, r4
 8000dfc:	1bdc      	subs	r4, r3, r7
 8000dfe:	42a3      	cmp	r3, r4
 8000e00:	419b      	sbcs	r3, r3
 8000e02:	4662      	mov	r2, ip
 8000e04:	425b      	negs	r3, r3
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	4699      	mov	r9, r3
 8000e0a:	464b      	mov	r3, r9
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	d400      	bmi.n	8000e12 <__aeabi_dsub+0xaa>
 8000e10:	e118      	b.n	8001044 <__aeabi_dsub+0x2dc>
 8000e12:	464b      	mov	r3, r9
 8000e14:	0258      	lsls	r0, r3, #9
 8000e16:	0a43      	lsrs	r3, r0, #9
 8000e18:	4699      	mov	r9, r3
 8000e1a:	464b      	mov	r3, r9
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_dsub+0xba>
 8000e20:	e137      	b.n	8001092 <__aeabi_dsub+0x32a>
 8000e22:	4648      	mov	r0, r9
 8000e24:	f000 fc02 	bl	800162c <__clzsi2>
 8000e28:	0001      	movs	r1, r0
 8000e2a:	3908      	subs	r1, #8
 8000e2c:	2320      	movs	r3, #32
 8000e2e:	0022      	movs	r2, r4
 8000e30:	4648      	mov	r0, r9
 8000e32:	1a5b      	subs	r3, r3, r1
 8000e34:	40da      	lsrs	r2, r3
 8000e36:	4088      	lsls	r0, r1
 8000e38:	408c      	lsls	r4, r1
 8000e3a:	4643      	mov	r3, r8
 8000e3c:	4310      	orrs	r0, r2
 8000e3e:	4588      	cmp	r8, r1
 8000e40:	dd00      	ble.n	8000e44 <__aeabi_dsub+0xdc>
 8000e42:	e136      	b.n	80010b2 <__aeabi_dsub+0x34a>
 8000e44:	1ac9      	subs	r1, r1, r3
 8000e46:	1c4b      	adds	r3, r1, #1
 8000e48:	2b1f      	cmp	r3, #31
 8000e4a:	dd00      	ble.n	8000e4e <__aeabi_dsub+0xe6>
 8000e4c:	e0ea      	b.n	8001024 <__aeabi_dsub+0x2bc>
 8000e4e:	2220      	movs	r2, #32
 8000e50:	0026      	movs	r6, r4
 8000e52:	1ad2      	subs	r2, r2, r3
 8000e54:	0001      	movs	r1, r0
 8000e56:	4094      	lsls	r4, r2
 8000e58:	40de      	lsrs	r6, r3
 8000e5a:	40d8      	lsrs	r0, r3
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	4091      	lsls	r1, r2
 8000e60:	1e62      	subs	r2, r4, #1
 8000e62:	4194      	sbcs	r4, r2
 8000e64:	4681      	mov	r9, r0
 8000e66:	4698      	mov	r8, r3
 8000e68:	4331      	orrs	r1, r6
 8000e6a:	430c      	orrs	r4, r1
 8000e6c:	0763      	lsls	r3, r4, #29
 8000e6e:	d009      	beq.n	8000e84 <__aeabi_dsub+0x11c>
 8000e70:	230f      	movs	r3, #15
 8000e72:	4023      	ands	r3, r4
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d005      	beq.n	8000e84 <__aeabi_dsub+0x11c>
 8000e78:	1d23      	adds	r3, r4, #4
 8000e7a:	42a3      	cmp	r3, r4
 8000e7c:	41a4      	sbcs	r4, r4
 8000e7e:	4264      	negs	r4, r4
 8000e80:	44a1      	add	r9, r4
 8000e82:	001c      	movs	r4, r3
 8000e84:	464b      	mov	r3, r9
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	d400      	bmi.n	8000e8c <__aeabi_dsub+0x124>
 8000e8a:	e0de      	b.n	800104a <__aeabi_dsub+0x2e2>
 8000e8c:	4641      	mov	r1, r8
 8000e8e:	4b8c      	ldr	r3, [pc, #560]	; (80010c0 <__aeabi_dsub+0x358>)
 8000e90:	3101      	adds	r1, #1
 8000e92:	4299      	cmp	r1, r3
 8000e94:	d100      	bne.n	8000e98 <__aeabi_dsub+0x130>
 8000e96:	e0e7      	b.n	8001068 <__aeabi_dsub+0x300>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	488a      	ldr	r0, [pc, #552]	; (80010c4 <__aeabi_dsub+0x35c>)
 8000e9c:	08e4      	lsrs	r4, r4, #3
 8000e9e:	4003      	ands	r3, r0
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	0549      	lsls	r1, r1, #21
 8000ea4:	075b      	lsls	r3, r3, #29
 8000ea6:	0240      	lsls	r0, r0, #9
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	0d4a      	lsrs	r2, r1, #21
 8000eac:	0b04      	lsrs	r4, r0, #12
 8000eae:	0512      	lsls	r2, r2, #20
 8000eb0:	07ed      	lsls	r5, r5, #31
 8000eb2:	4322      	orrs	r2, r4
 8000eb4:	432a      	orrs	r2, r5
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	0011      	movs	r1, r2
 8000eba:	bcf0      	pop	{r4, r5, r6, r7}
 8000ebc:	46bb      	mov	fp, r7
 8000ebe:	46b2      	mov	sl, r6
 8000ec0:	46a9      	mov	r9, r5
 8000ec2:	46a0      	mov	r8, r4
 8000ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ec6:	4642      	mov	r2, r8
 8000ec8:	1a12      	subs	r2, r2, r0
 8000eca:	2a00      	cmp	r2, #0
 8000ecc:	dd52      	ble.n	8000f74 <__aeabi_dsub+0x20c>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_dsub+0x16c>
 8000ed2:	e09c      	b.n	800100e <__aeabi_dsub+0x2a6>
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d100      	bne.n	8000eda <__aeabi_dsub+0x172>
 8000ed8:	e0ca      	b.n	8001070 <__aeabi_dsub+0x308>
 8000eda:	2080      	movs	r0, #128	; 0x80
 8000edc:	0400      	lsls	r0, r0, #16
 8000ede:	4301      	orrs	r1, r0
 8000ee0:	2a38      	cmp	r2, #56	; 0x38
 8000ee2:	dd00      	ble.n	8000ee6 <__aeabi_dsub+0x17e>
 8000ee4:	e149      	b.n	800117a <__aeabi_dsub+0x412>
 8000ee6:	2a1f      	cmp	r2, #31
 8000ee8:	dc00      	bgt.n	8000eec <__aeabi_dsub+0x184>
 8000eea:	e197      	b.n	800121c <__aeabi_dsub+0x4b4>
 8000eec:	0010      	movs	r0, r2
 8000eee:	000e      	movs	r6, r1
 8000ef0:	3820      	subs	r0, #32
 8000ef2:	40c6      	lsrs	r6, r0
 8000ef4:	2a20      	cmp	r2, #32
 8000ef6:	d004      	beq.n	8000f02 <__aeabi_dsub+0x19a>
 8000ef8:	2040      	movs	r0, #64	; 0x40
 8000efa:	1a82      	subs	r2, r0, r2
 8000efc:	4091      	lsls	r1, r2
 8000efe:	430f      	orrs	r7, r1
 8000f00:	46b9      	mov	r9, r7
 8000f02:	464c      	mov	r4, r9
 8000f04:	1e62      	subs	r2, r4, #1
 8000f06:	4194      	sbcs	r4, r2
 8000f08:	4334      	orrs	r4, r6
 8000f0a:	e13a      	b.n	8001182 <__aeabi_dsub+0x41a>
 8000f0c:	000a      	movs	r2, r1
 8000f0e:	433a      	orrs	r2, r7
 8000f10:	d028      	beq.n	8000f64 <__aeabi_dsub+0x1fc>
 8000f12:	46b3      	mov	fp, r6
 8000f14:	42b5      	cmp	r5, r6
 8000f16:	d02b      	beq.n	8000f70 <__aeabi_dsub+0x208>
 8000f18:	4a6b      	ldr	r2, [pc, #428]	; (80010c8 <__aeabi_dsub+0x360>)
 8000f1a:	4442      	add	r2, r8
 8000f1c:	2a00      	cmp	r2, #0
 8000f1e:	d05d      	beq.n	8000fdc <__aeabi_dsub+0x274>
 8000f20:	4642      	mov	r2, r8
 8000f22:	4644      	mov	r4, r8
 8000f24:	1a82      	subs	r2, r0, r2
 8000f26:	2c00      	cmp	r4, #0
 8000f28:	d000      	beq.n	8000f2c <__aeabi_dsub+0x1c4>
 8000f2a:	e0f5      	b.n	8001118 <__aeabi_dsub+0x3b0>
 8000f2c:	4665      	mov	r5, ip
 8000f2e:	431d      	orrs	r5, r3
 8000f30:	d100      	bne.n	8000f34 <__aeabi_dsub+0x1cc>
 8000f32:	e19c      	b.n	800126e <__aeabi_dsub+0x506>
 8000f34:	1e55      	subs	r5, r2, #1
 8000f36:	2a01      	cmp	r2, #1
 8000f38:	d100      	bne.n	8000f3c <__aeabi_dsub+0x1d4>
 8000f3a:	e1fb      	b.n	8001334 <__aeabi_dsub+0x5cc>
 8000f3c:	4c60      	ldr	r4, [pc, #384]	; (80010c0 <__aeabi_dsub+0x358>)
 8000f3e:	42a2      	cmp	r2, r4
 8000f40:	d100      	bne.n	8000f44 <__aeabi_dsub+0x1dc>
 8000f42:	e1bd      	b.n	80012c0 <__aeabi_dsub+0x558>
 8000f44:	002a      	movs	r2, r5
 8000f46:	e0f0      	b.n	800112a <__aeabi_dsub+0x3c2>
 8000f48:	0008      	movs	r0, r1
 8000f4a:	4338      	orrs	r0, r7
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_dsub+0x1e8>
 8000f4e:	e0c3      	b.n	80010d8 <__aeabi_dsub+0x370>
 8000f50:	1e50      	subs	r0, r2, #1
 8000f52:	2a01      	cmp	r2, #1
 8000f54:	d100      	bne.n	8000f58 <__aeabi_dsub+0x1f0>
 8000f56:	e1a8      	b.n	80012aa <__aeabi_dsub+0x542>
 8000f58:	4c59      	ldr	r4, [pc, #356]	; (80010c0 <__aeabi_dsub+0x358>)
 8000f5a:	42a2      	cmp	r2, r4
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_dsub+0x1f8>
 8000f5e:	e087      	b.n	8001070 <__aeabi_dsub+0x308>
 8000f60:	0002      	movs	r2, r0
 8000f62:	e736      	b.n	8000dd2 <__aeabi_dsub+0x6a>
 8000f64:	2201      	movs	r2, #1
 8000f66:	4056      	eors	r6, r2
 8000f68:	46b3      	mov	fp, r6
 8000f6a:	42b5      	cmp	r5, r6
 8000f6c:	d000      	beq.n	8000f70 <__aeabi_dsub+0x208>
 8000f6e:	e721      	b.n	8000db4 <__aeabi_dsub+0x4c>
 8000f70:	4a55      	ldr	r2, [pc, #340]	; (80010c8 <__aeabi_dsub+0x360>)
 8000f72:	4442      	add	r2, r8
 8000f74:	2a00      	cmp	r2, #0
 8000f76:	d100      	bne.n	8000f7a <__aeabi_dsub+0x212>
 8000f78:	e0b5      	b.n	80010e6 <__aeabi_dsub+0x37e>
 8000f7a:	4642      	mov	r2, r8
 8000f7c:	4644      	mov	r4, r8
 8000f7e:	1a82      	subs	r2, r0, r2
 8000f80:	2c00      	cmp	r4, #0
 8000f82:	d100      	bne.n	8000f86 <__aeabi_dsub+0x21e>
 8000f84:	e138      	b.n	80011f8 <__aeabi_dsub+0x490>
 8000f86:	4e4e      	ldr	r6, [pc, #312]	; (80010c0 <__aeabi_dsub+0x358>)
 8000f88:	42b0      	cmp	r0, r6
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_dsub+0x226>
 8000f8c:	e1de      	b.n	800134c <__aeabi_dsub+0x5e4>
 8000f8e:	2680      	movs	r6, #128	; 0x80
 8000f90:	4664      	mov	r4, ip
 8000f92:	0436      	lsls	r6, r6, #16
 8000f94:	4334      	orrs	r4, r6
 8000f96:	46a4      	mov	ip, r4
 8000f98:	2a38      	cmp	r2, #56	; 0x38
 8000f9a:	dd00      	ble.n	8000f9e <__aeabi_dsub+0x236>
 8000f9c:	e196      	b.n	80012cc <__aeabi_dsub+0x564>
 8000f9e:	2a1f      	cmp	r2, #31
 8000fa0:	dd00      	ble.n	8000fa4 <__aeabi_dsub+0x23c>
 8000fa2:	e224      	b.n	80013ee <__aeabi_dsub+0x686>
 8000fa4:	2620      	movs	r6, #32
 8000fa6:	1ab4      	subs	r4, r6, r2
 8000fa8:	46a2      	mov	sl, r4
 8000faa:	4664      	mov	r4, ip
 8000fac:	4656      	mov	r6, sl
 8000fae:	40b4      	lsls	r4, r6
 8000fb0:	46a1      	mov	r9, r4
 8000fb2:	001c      	movs	r4, r3
 8000fb4:	464e      	mov	r6, r9
 8000fb6:	40d4      	lsrs	r4, r2
 8000fb8:	4326      	orrs	r6, r4
 8000fba:	0034      	movs	r4, r6
 8000fbc:	4656      	mov	r6, sl
 8000fbe:	40b3      	lsls	r3, r6
 8000fc0:	1e5e      	subs	r6, r3, #1
 8000fc2:	41b3      	sbcs	r3, r6
 8000fc4:	431c      	orrs	r4, r3
 8000fc6:	4663      	mov	r3, ip
 8000fc8:	40d3      	lsrs	r3, r2
 8000fca:	18c9      	adds	r1, r1, r3
 8000fcc:	19e4      	adds	r4, r4, r7
 8000fce:	42bc      	cmp	r4, r7
 8000fd0:	41bf      	sbcs	r7, r7
 8000fd2:	427f      	negs	r7, r7
 8000fd4:	46b9      	mov	r9, r7
 8000fd6:	4680      	mov	r8, r0
 8000fd8:	4489      	add	r9, r1
 8000fda:	e0d8      	b.n	800118e <__aeabi_dsub+0x426>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	4c3b      	ldr	r4, [pc, #236]	; (80010cc <__aeabi_dsub+0x364>)
 8000fe0:	3001      	adds	r0, #1
 8000fe2:	4220      	tst	r0, r4
 8000fe4:	d000      	beq.n	8000fe8 <__aeabi_dsub+0x280>
 8000fe6:	e0b4      	b.n	8001152 <__aeabi_dsub+0x3ea>
 8000fe8:	4640      	mov	r0, r8
 8000fea:	2800      	cmp	r0, #0
 8000fec:	d000      	beq.n	8000ff0 <__aeabi_dsub+0x288>
 8000fee:	e144      	b.n	800127a <__aeabi_dsub+0x512>
 8000ff0:	4660      	mov	r0, ip
 8000ff2:	4318      	orrs	r0, r3
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_dsub+0x290>
 8000ff6:	e190      	b.n	800131a <__aeabi_dsub+0x5b2>
 8000ff8:	0008      	movs	r0, r1
 8000ffa:	4338      	orrs	r0, r7
 8000ffc:	d000      	beq.n	8001000 <__aeabi_dsub+0x298>
 8000ffe:	e1aa      	b.n	8001356 <__aeabi_dsub+0x5ee>
 8001000:	4661      	mov	r1, ip
 8001002:	08db      	lsrs	r3, r3, #3
 8001004:	0749      	lsls	r1, r1, #29
 8001006:	430b      	orrs	r3, r1
 8001008:	4661      	mov	r1, ip
 800100a:	08cc      	lsrs	r4, r1, #3
 800100c:	e027      	b.n	800105e <__aeabi_dsub+0x2f6>
 800100e:	0008      	movs	r0, r1
 8001010:	4338      	orrs	r0, r7
 8001012:	d061      	beq.n	80010d8 <__aeabi_dsub+0x370>
 8001014:	1e50      	subs	r0, r2, #1
 8001016:	2a01      	cmp	r2, #1
 8001018:	d100      	bne.n	800101c <__aeabi_dsub+0x2b4>
 800101a:	e139      	b.n	8001290 <__aeabi_dsub+0x528>
 800101c:	42a2      	cmp	r2, r4
 800101e:	d027      	beq.n	8001070 <__aeabi_dsub+0x308>
 8001020:	0002      	movs	r2, r0
 8001022:	e75d      	b.n	8000ee0 <__aeabi_dsub+0x178>
 8001024:	0002      	movs	r2, r0
 8001026:	391f      	subs	r1, #31
 8001028:	40ca      	lsrs	r2, r1
 800102a:	0011      	movs	r1, r2
 800102c:	2b20      	cmp	r3, #32
 800102e:	d003      	beq.n	8001038 <__aeabi_dsub+0x2d0>
 8001030:	2240      	movs	r2, #64	; 0x40
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	4098      	lsls	r0, r3
 8001036:	4304      	orrs	r4, r0
 8001038:	1e63      	subs	r3, r4, #1
 800103a:	419c      	sbcs	r4, r3
 800103c:	2300      	movs	r3, #0
 800103e:	4699      	mov	r9, r3
 8001040:	4698      	mov	r8, r3
 8001042:	430c      	orrs	r4, r1
 8001044:	0763      	lsls	r3, r4, #29
 8001046:	d000      	beq.n	800104a <__aeabi_dsub+0x2e2>
 8001048:	e712      	b.n	8000e70 <__aeabi_dsub+0x108>
 800104a:	464b      	mov	r3, r9
 800104c:	464a      	mov	r2, r9
 800104e:	08e4      	lsrs	r4, r4, #3
 8001050:	075b      	lsls	r3, r3, #29
 8001052:	4323      	orrs	r3, r4
 8001054:	08d4      	lsrs	r4, r2, #3
 8001056:	4642      	mov	r2, r8
 8001058:	4919      	ldr	r1, [pc, #100]	; (80010c0 <__aeabi_dsub+0x358>)
 800105a:	428a      	cmp	r2, r1
 800105c:	d00e      	beq.n	800107c <__aeabi_dsub+0x314>
 800105e:	0324      	lsls	r4, r4, #12
 8001060:	0552      	lsls	r2, r2, #21
 8001062:	0b24      	lsrs	r4, r4, #12
 8001064:	0d52      	lsrs	r2, r2, #21
 8001066:	e722      	b.n	8000eae <__aeabi_dsub+0x146>
 8001068:	000a      	movs	r2, r1
 800106a:	2400      	movs	r4, #0
 800106c:	2300      	movs	r3, #0
 800106e:	e71e      	b.n	8000eae <__aeabi_dsub+0x146>
 8001070:	08db      	lsrs	r3, r3, #3
 8001072:	4662      	mov	r2, ip
 8001074:	0752      	lsls	r2, r2, #29
 8001076:	4313      	orrs	r3, r2
 8001078:	4662      	mov	r2, ip
 800107a:	08d4      	lsrs	r4, r2, #3
 800107c:	001a      	movs	r2, r3
 800107e:	4322      	orrs	r2, r4
 8001080:	d100      	bne.n	8001084 <__aeabi_dsub+0x31c>
 8001082:	e1fc      	b.n	800147e <__aeabi_dsub+0x716>
 8001084:	2280      	movs	r2, #128	; 0x80
 8001086:	0312      	lsls	r2, r2, #12
 8001088:	4314      	orrs	r4, r2
 800108a:	0324      	lsls	r4, r4, #12
 800108c:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <__aeabi_dsub+0x358>)
 800108e:	0b24      	lsrs	r4, r4, #12
 8001090:	e70d      	b.n	8000eae <__aeabi_dsub+0x146>
 8001092:	0020      	movs	r0, r4
 8001094:	f000 faca 	bl	800162c <__clzsi2>
 8001098:	0001      	movs	r1, r0
 800109a:	3118      	adds	r1, #24
 800109c:	291f      	cmp	r1, #31
 800109e:	dc00      	bgt.n	80010a2 <__aeabi_dsub+0x33a>
 80010a0:	e6c4      	b.n	8000e2c <__aeabi_dsub+0xc4>
 80010a2:	3808      	subs	r0, #8
 80010a4:	4084      	lsls	r4, r0
 80010a6:	4643      	mov	r3, r8
 80010a8:	0020      	movs	r0, r4
 80010aa:	2400      	movs	r4, #0
 80010ac:	4588      	cmp	r8, r1
 80010ae:	dc00      	bgt.n	80010b2 <__aeabi_dsub+0x34a>
 80010b0:	e6c8      	b.n	8000e44 <__aeabi_dsub+0xdc>
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <__aeabi_dsub+0x35c>)
 80010b4:	1a5b      	subs	r3, r3, r1
 80010b6:	4010      	ands	r0, r2
 80010b8:	4698      	mov	r8, r3
 80010ba:	4681      	mov	r9, r0
 80010bc:	e6d6      	b.n	8000e6c <__aeabi_dsub+0x104>
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	000007ff 	.word	0x000007ff
 80010c4:	ff7fffff 	.word	0xff7fffff
 80010c8:	fffff801 	.word	0xfffff801
 80010cc:	000007fe 	.word	0x000007fe
 80010d0:	430f      	orrs	r7, r1
 80010d2:	1e7a      	subs	r2, r7, #1
 80010d4:	4197      	sbcs	r7, r2
 80010d6:	e691      	b.n	8000dfc <__aeabi_dsub+0x94>
 80010d8:	4661      	mov	r1, ip
 80010da:	08db      	lsrs	r3, r3, #3
 80010dc:	0749      	lsls	r1, r1, #29
 80010de:	430b      	orrs	r3, r1
 80010e0:	4661      	mov	r1, ip
 80010e2:	08cc      	lsrs	r4, r1, #3
 80010e4:	e7b8      	b.n	8001058 <__aeabi_dsub+0x2f0>
 80010e6:	4640      	mov	r0, r8
 80010e8:	4cd3      	ldr	r4, [pc, #844]	; (8001438 <__aeabi_dsub+0x6d0>)
 80010ea:	3001      	adds	r0, #1
 80010ec:	4220      	tst	r0, r4
 80010ee:	d000      	beq.n	80010f2 <__aeabi_dsub+0x38a>
 80010f0:	e0a2      	b.n	8001238 <__aeabi_dsub+0x4d0>
 80010f2:	4640      	mov	r0, r8
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d000      	beq.n	80010fa <__aeabi_dsub+0x392>
 80010f8:	e101      	b.n	80012fe <__aeabi_dsub+0x596>
 80010fa:	4660      	mov	r0, ip
 80010fc:	4318      	orrs	r0, r3
 80010fe:	d100      	bne.n	8001102 <__aeabi_dsub+0x39a>
 8001100:	e15e      	b.n	80013c0 <__aeabi_dsub+0x658>
 8001102:	0008      	movs	r0, r1
 8001104:	4338      	orrs	r0, r7
 8001106:	d000      	beq.n	800110a <__aeabi_dsub+0x3a2>
 8001108:	e15f      	b.n	80013ca <__aeabi_dsub+0x662>
 800110a:	4661      	mov	r1, ip
 800110c:	08db      	lsrs	r3, r3, #3
 800110e:	0749      	lsls	r1, r1, #29
 8001110:	430b      	orrs	r3, r1
 8001112:	4661      	mov	r1, ip
 8001114:	08cc      	lsrs	r4, r1, #3
 8001116:	e7a2      	b.n	800105e <__aeabi_dsub+0x2f6>
 8001118:	4dc8      	ldr	r5, [pc, #800]	; (800143c <__aeabi_dsub+0x6d4>)
 800111a:	42a8      	cmp	r0, r5
 800111c:	d100      	bne.n	8001120 <__aeabi_dsub+0x3b8>
 800111e:	e0cf      	b.n	80012c0 <__aeabi_dsub+0x558>
 8001120:	2580      	movs	r5, #128	; 0x80
 8001122:	4664      	mov	r4, ip
 8001124:	042d      	lsls	r5, r5, #16
 8001126:	432c      	orrs	r4, r5
 8001128:	46a4      	mov	ip, r4
 800112a:	2a38      	cmp	r2, #56	; 0x38
 800112c:	dc56      	bgt.n	80011dc <__aeabi_dsub+0x474>
 800112e:	2a1f      	cmp	r2, #31
 8001130:	dd00      	ble.n	8001134 <__aeabi_dsub+0x3cc>
 8001132:	e0d1      	b.n	80012d8 <__aeabi_dsub+0x570>
 8001134:	2520      	movs	r5, #32
 8001136:	001e      	movs	r6, r3
 8001138:	1aad      	subs	r5, r5, r2
 800113a:	4664      	mov	r4, ip
 800113c:	40ab      	lsls	r3, r5
 800113e:	40ac      	lsls	r4, r5
 8001140:	40d6      	lsrs	r6, r2
 8001142:	1e5d      	subs	r5, r3, #1
 8001144:	41ab      	sbcs	r3, r5
 8001146:	4334      	orrs	r4, r6
 8001148:	4323      	orrs	r3, r4
 800114a:	4664      	mov	r4, ip
 800114c:	40d4      	lsrs	r4, r2
 800114e:	1b09      	subs	r1, r1, r4
 8001150:	e049      	b.n	80011e6 <__aeabi_dsub+0x47e>
 8001152:	4660      	mov	r0, ip
 8001154:	1bdc      	subs	r4, r3, r7
 8001156:	1a46      	subs	r6, r0, r1
 8001158:	42a3      	cmp	r3, r4
 800115a:	4180      	sbcs	r0, r0
 800115c:	4240      	negs	r0, r0
 800115e:	4681      	mov	r9, r0
 8001160:	0030      	movs	r0, r6
 8001162:	464e      	mov	r6, r9
 8001164:	1b80      	subs	r0, r0, r6
 8001166:	4681      	mov	r9, r0
 8001168:	0200      	lsls	r0, r0, #8
 800116a:	d476      	bmi.n	800125a <__aeabi_dsub+0x4f2>
 800116c:	464b      	mov	r3, r9
 800116e:	4323      	orrs	r3, r4
 8001170:	d000      	beq.n	8001174 <__aeabi_dsub+0x40c>
 8001172:	e652      	b.n	8000e1a <__aeabi_dsub+0xb2>
 8001174:	2400      	movs	r4, #0
 8001176:	2500      	movs	r5, #0
 8001178:	e771      	b.n	800105e <__aeabi_dsub+0x2f6>
 800117a:	4339      	orrs	r1, r7
 800117c:	000c      	movs	r4, r1
 800117e:	1e62      	subs	r2, r4, #1
 8001180:	4194      	sbcs	r4, r2
 8001182:	18e4      	adds	r4, r4, r3
 8001184:	429c      	cmp	r4, r3
 8001186:	419b      	sbcs	r3, r3
 8001188:	425b      	negs	r3, r3
 800118a:	4463      	add	r3, ip
 800118c:	4699      	mov	r9, r3
 800118e:	464b      	mov	r3, r9
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	d400      	bmi.n	8001196 <__aeabi_dsub+0x42e>
 8001194:	e756      	b.n	8001044 <__aeabi_dsub+0x2dc>
 8001196:	2301      	movs	r3, #1
 8001198:	469c      	mov	ip, r3
 800119a:	4ba8      	ldr	r3, [pc, #672]	; (800143c <__aeabi_dsub+0x6d4>)
 800119c:	44e0      	add	r8, ip
 800119e:	4598      	cmp	r8, r3
 80011a0:	d038      	beq.n	8001214 <__aeabi_dsub+0x4ac>
 80011a2:	464b      	mov	r3, r9
 80011a4:	48a6      	ldr	r0, [pc, #664]	; (8001440 <__aeabi_dsub+0x6d8>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	4003      	ands	r3, r0
 80011aa:	0018      	movs	r0, r3
 80011ac:	0863      	lsrs	r3, r4, #1
 80011ae:	4014      	ands	r4, r2
 80011b0:	431c      	orrs	r4, r3
 80011b2:	07c3      	lsls	r3, r0, #31
 80011b4:	431c      	orrs	r4, r3
 80011b6:	0843      	lsrs	r3, r0, #1
 80011b8:	4699      	mov	r9, r3
 80011ba:	e657      	b.n	8000e6c <__aeabi_dsub+0x104>
 80011bc:	0010      	movs	r0, r2
 80011be:	000e      	movs	r6, r1
 80011c0:	3820      	subs	r0, #32
 80011c2:	40c6      	lsrs	r6, r0
 80011c4:	2a20      	cmp	r2, #32
 80011c6:	d004      	beq.n	80011d2 <__aeabi_dsub+0x46a>
 80011c8:	2040      	movs	r0, #64	; 0x40
 80011ca:	1a82      	subs	r2, r0, r2
 80011cc:	4091      	lsls	r1, r2
 80011ce:	430f      	orrs	r7, r1
 80011d0:	46b9      	mov	r9, r7
 80011d2:	464f      	mov	r7, r9
 80011d4:	1e7a      	subs	r2, r7, #1
 80011d6:	4197      	sbcs	r7, r2
 80011d8:	4337      	orrs	r7, r6
 80011da:	e60f      	b.n	8000dfc <__aeabi_dsub+0x94>
 80011dc:	4662      	mov	r2, ip
 80011de:	431a      	orrs	r2, r3
 80011e0:	0013      	movs	r3, r2
 80011e2:	1e5a      	subs	r2, r3, #1
 80011e4:	4193      	sbcs	r3, r2
 80011e6:	1afc      	subs	r4, r7, r3
 80011e8:	42a7      	cmp	r7, r4
 80011ea:	41bf      	sbcs	r7, r7
 80011ec:	427f      	negs	r7, r7
 80011ee:	1bcb      	subs	r3, r1, r7
 80011f0:	4699      	mov	r9, r3
 80011f2:	465d      	mov	r5, fp
 80011f4:	4680      	mov	r8, r0
 80011f6:	e608      	b.n	8000e0a <__aeabi_dsub+0xa2>
 80011f8:	4666      	mov	r6, ip
 80011fa:	431e      	orrs	r6, r3
 80011fc:	d100      	bne.n	8001200 <__aeabi_dsub+0x498>
 80011fe:	e0be      	b.n	800137e <__aeabi_dsub+0x616>
 8001200:	1e56      	subs	r6, r2, #1
 8001202:	2a01      	cmp	r2, #1
 8001204:	d100      	bne.n	8001208 <__aeabi_dsub+0x4a0>
 8001206:	e109      	b.n	800141c <__aeabi_dsub+0x6b4>
 8001208:	4c8c      	ldr	r4, [pc, #560]	; (800143c <__aeabi_dsub+0x6d4>)
 800120a:	42a2      	cmp	r2, r4
 800120c:	d100      	bne.n	8001210 <__aeabi_dsub+0x4a8>
 800120e:	e119      	b.n	8001444 <__aeabi_dsub+0x6dc>
 8001210:	0032      	movs	r2, r6
 8001212:	e6c1      	b.n	8000f98 <__aeabi_dsub+0x230>
 8001214:	4642      	mov	r2, r8
 8001216:	2400      	movs	r4, #0
 8001218:	2300      	movs	r3, #0
 800121a:	e648      	b.n	8000eae <__aeabi_dsub+0x146>
 800121c:	2020      	movs	r0, #32
 800121e:	000c      	movs	r4, r1
 8001220:	1a80      	subs	r0, r0, r2
 8001222:	003e      	movs	r6, r7
 8001224:	4087      	lsls	r7, r0
 8001226:	4084      	lsls	r4, r0
 8001228:	40d6      	lsrs	r6, r2
 800122a:	1e78      	subs	r0, r7, #1
 800122c:	4187      	sbcs	r7, r0
 800122e:	40d1      	lsrs	r1, r2
 8001230:	4334      	orrs	r4, r6
 8001232:	433c      	orrs	r4, r7
 8001234:	448c      	add	ip, r1
 8001236:	e7a4      	b.n	8001182 <__aeabi_dsub+0x41a>
 8001238:	4a80      	ldr	r2, [pc, #512]	; (800143c <__aeabi_dsub+0x6d4>)
 800123a:	4290      	cmp	r0, r2
 800123c:	d100      	bne.n	8001240 <__aeabi_dsub+0x4d8>
 800123e:	e0e9      	b.n	8001414 <__aeabi_dsub+0x6ac>
 8001240:	19df      	adds	r7, r3, r7
 8001242:	429f      	cmp	r7, r3
 8001244:	419b      	sbcs	r3, r3
 8001246:	4461      	add	r1, ip
 8001248:	425b      	negs	r3, r3
 800124a:	18c9      	adds	r1, r1, r3
 800124c:	07cc      	lsls	r4, r1, #31
 800124e:	087f      	lsrs	r7, r7, #1
 8001250:	084b      	lsrs	r3, r1, #1
 8001252:	4699      	mov	r9, r3
 8001254:	4680      	mov	r8, r0
 8001256:	433c      	orrs	r4, r7
 8001258:	e6f4      	b.n	8001044 <__aeabi_dsub+0x2dc>
 800125a:	1afc      	subs	r4, r7, r3
 800125c:	42a7      	cmp	r7, r4
 800125e:	41bf      	sbcs	r7, r7
 8001260:	4663      	mov	r3, ip
 8001262:	427f      	negs	r7, r7
 8001264:	1ac9      	subs	r1, r1, r3
 8001266:	1bcb      	subs	r3, r1, r7
 8001268:	4699      	mov	r9, r3
 800126a:	465d      	mov	r5, fp
 800126c:	e5d5      	b.n	8000e1a <__aeabi_dsub+0xb2>
 800126e:	08ff      	lsrs	r7, r7, #3
 8001270:	074b      	lsls	r3, r1, #29
 8001272:	465d      	mov	r5, fp
 8001274:	433b      	orrs	r3, r7
 8001276:	08cc      	lsrs	r4, r1, #3
 8001278:	e6ee      	b.n	8001058 <__aeabi_dsub+0x2f0>
 800127a:	4662      	mov	r2, ip
 800127c:	431a      	orrs	r2, r3
 800127e:	d000      	beq.n	8001282 <__aeabi_dsub+0x51a>
 8001280:	e082      	b.n	8001388 <__aeabi_dsub+0x620>
 8001282:	000b      	movs	r3, r1
 8001284:	433b      	orrs	r3, r7
 8001286:	d11b      	bne.n	80012c0 <__aeabi_dsub+0x558>
 8001288:	2480      	movs	r4, #128	; 0x80
 800128a:	2500      	movs	r5, #0
 800128c:	0324      	lsls	r4, r4, #12
 800128e:	e6f9      	b.n	8001084 <__aeabi_dsub+0x31c>
 8001290:	19dc      	adds	r4, r3, r7
 8001292:	429c      	cmp	r4, r3
 8001294:	419b      	sbcs	r3, r3
 8001296:	4461      	add	r1, ip
 8001298:	4689      	mov	r9, r1
 800129a:	425b      	negs	r3, r3
 800129c:	4499      	add	r9, r3
 800129e:	464b      	mov	r3, r9
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	d444      	bmi.n	800132e <__aeabi_dsub+0x5c6>
 80012a4:	2301      	movs	r3, #1
 80012a6:	4698      	mov	r8, r3
 80012a8:	e6cc      	b.n	8001044 <__aeabi_dsub+0x2dc>
 80012aa:	1bdc      	subs	r4, r3, r7
 80012ac:	4662      	mov	r2, ip
 80012ae:	42a3      	cmp	r3, r4
 80012b0:	419b      	sbcs	r3, r3
 80012b2:	1a51      	subs	r1, r2, r1
 80012b4:	425b      	negs	r3, r3
 80012b6:	1acb      	subs	r3, r1, r3
 80012b8:	4699      	mov	r9, r3
 80012ba:	2301      	movs	r3, #1
 80012bc:	4698      	mov	r8, r3
 80012be:	e5a4      	b.n	8000e0a <__aeabi_dsub+0xa2>
 80012c0:	08ff      	lsrs	r7, r7, #3
 80012c2:	074b      	lsls	r3, r1, #29
 80012c4:	465d      	mov	r5, fp
 80012c6:	433b      	orrs	r3, r7
 80012c8:	08cc      	lsrs	r4, r1, #3
 80012ca:	e6d7      	b.n	800107c <__aeabi_dsub+0x314>
 80012cc:	4662      	mov	r2, ip
 80012ce:	431a      	orrs	r2, r3
 80012d0:	0014      	movs	r4, r2
 80012d2:	1e63      	subs	r3, r4, #1
 80012d4:	419c      	sbcs	r4, r3
 80012d6:	e679      	b.n	8000fcc <__aeabi_dsub+0x264>
 80012d8:	0015      	movs	r5, r2
 80012da:	4664      	mov	r4, ip
 80012dc:	3d20      	subs	r5, #32
 80012de:	40ec      	lsrs	r4, r5
 80012e0:	46a0      	mov	r8, r4
 80012e2:	2a20      	cmp	r2, #32
 80012e4:	d005      	beq.n	80012f2 <__aeabi_dsub+0x58a>
 80012e6:	2540      	movs	r5, #64	; 0x40
 80012e8:	4664      	mov	r4, ip
 80012ea:	1aaa      	subs	r2, r5, r2
 80012ec:	4094      	lsls	r4, r2
 80012ee:	4323      	orrs	r3, r4
 80012f0:	469a      	mov	sl, r3
 80012f2:	4654      	mov	r4, sl
 80012f4:	1e63      	subs	r3, r4, #1
 80012f6:	419c      	sbcs	r4, r3
 80012f8:	4643      	mov	r3, r8
 80012fa:	4323      	orrs	r3, r4
 80012fc:	e773      	b.n	80011e6 <__aeabi_dsub+0x47e>
 80012fe:	4662      	mov	r2, ip
 8001300:	431a      	orrs	r2, r3
 8001302:	d023      	beq.n	800134c <__aeabi_dsub+0x5e4>
 8001304:	000a      	movs	r2, r1
 8001306:	433a      	orrs	r2, r7
 8001308:	d000      	beq.n	800130c <__aeabi_dsub+0x5a4>
 800130a:	e0a0      	b.n	800144e <__aeabi_dsub+0x6e6>
 800130c:	4662      	mov	r2, ip
 800130e:	08db      	lsrs	r3, r3, #3
 8001310:	0752      	lsls	r2, r2, #29
 8001312:	4313      	orrs	r3, r2
 8001314:	4662      	mov	r2, ip
 8001316:	08d4      	lsrs	r4, r2, #3
 8001318:	e6b0      	b.n	800107c <__aeabi_dsub+0x314>
 800131a:	000b      	movs	r3, r1
 800131c:	433b      	orrs	r3, r7
 800131e:	d100      	bne.n	8001322 <__aeabi_dsub+0x5ba>
 8001320:	e728      	b.n	8001174 <__aeabi_dsub+0x40c>
 8001322:	08ff      	lsrs	r7, r7, #3
 8001324:	074b      	lsls	r3, r1, #29
 8001326:	465d      	mov	r5, fp
 8001328:	433b      	orrs	r3, r7
 800132a:	08cc      	lsrs	r4, r1, #3
 800132c:	e697      	b.n	800105e <__aeabi_dsub+0x2f6>
 800132e:	2302      	movs	r3, #2
 8001330:	4698      	mov	r8, r3
 8001332:	e736      	b.n	80011a2 <__aeabi_dsub+0x43a>
 8001334:	1afc      	subs	r4, r7, r3
 8001336:	42a7      	cmp	r7, r4
 8001338:	41bf      	sbcs	r7, r7
 800133a:	4663      	mov	r3, ip
 800133c:	427f      	negs	r7, r7
 800133e:	1ac9      	subs	r1, r1, r3
 8001340:	1bcb      	subs	r3, r1, r7
 8001342:	4699      	mov	r9, r3
 8001344:	2301      	movs	r3, #1
 8001346:	465d      	mov	r5, fp
 8001348:	4698      	mov	r8, r3
 800134a:	e55e      	b.n	8000e0a <__aeabi_dsub+0xa2>
 800134c:	074b      	lsls	r3, r1, #29
 800134e:	08ff      	lsrs	r7, r7, #3
 8001350:	433b      	orrs	r3, r7
 8001352:	08cc      	lsrs	r4, r1, #3
 8001354:	e692      	b.n	800107c <__aeabi_dsub+0x314>
 8001356:	1bdc      	subs	r4, r3, r7
 8001358:	4660      	mov	r0, ip
 800135a:	42a3      	cmp	r3, r4
 800135c:	41b6      	sbcs	r6, r6
 800135e:	1a40      	subs	r0, r0, r1
 8001360:	4276      	negs	r6, r6
 8001362:	1b80      	subs	r0, r0, r6
 8001364:	4681      	mov	r9, r0
 8001366:	0200      	lsls	r0, r0, #8
 8001368:	d560      	bpl.n	800142c <__aeabi_dsub+0x6c4>
 800136a:	1afc      	subs	r4, r7, r3
 800136c:	42a7      	cmp	r7, r4
 800136e:	41bf      	sbcs	r7, r7
 8001370:	4663      	mov	r3, ip
 8001372:	427f      	negs	r7, r7
 8001374:	1ac9      	subs	r1, r1, r3
 8001376:	1bcb      	subs	r3, r1, r7
 8001378:	4699      	mov	r9, r3
 800137a:	465d      	mov	r5, fp
 800137c:	e576      	b.n	8000e6c <__aeabi_dsub+0x104>
 800137e:	08ff      	lsrs	r7, r7, #3
 8001380:	074b      	lsls	r3, r1, #29
 8001382:	433b      	orrs	r3, r7
 8001384:	08cc      	lsrs	r4, r1, #3
 8001386:	e667      	b.n	8001058 <__aeabi_dsub+0x2f0>
 8001388:	000a      	movs	r2, r1
 800138a:	08db      	lsrs	r3, r3, #3
 800138c:	433a      	orrs	r2, r7
 800138e:	d100      	bne.n	8001392 <__aeabi_dsub+0x62a>
 8001390:	e66f      	b.n	8001072 <__aeabi_dsub+0x30a>
 8001392:	4662      	mov	r2, ip
 8001394:	0752      	lsls	r2, r2, #29
 8001396:	4313      	orrs	r3, r2
 8001398:	4662      	mov	r2, ip
 800139a:	08d4      	lsrs	r4, r2, #3
 800139c:	2280      	movs	r2, #128	; 0x80
 800139e:	0312      	lsls	r2, r2, #12
 80013a0:	4214      	tst	r4, r2
 80013a2:	d007      	beq.n	80013b4 <__aeabi_dsub+0x64c>
 80013a4:	08c8      	lsrs	r0, r1, #3
 80013a6:	4210      	tst	r0, r2
 80013a8:	d104      	bne.n	80013b4 <__aeabi_dsub+0x64c>
 80013aa:	465d      	mov	r5, fp
 80013ac:	0004      	movs	r4, r0
 80013ae:	08fb      	lsrs	r3, r7, #3
 80013b0:	0749      	lsls	r1, r1, #29
 80013b2:	430b      	orrs	r3, r1
 80013b4:	0f5a      	lsrs	r2, r3, #29
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	08db      	lsrs	r3, r3, #3
 80013ba:	0752      	lsls	r2, r2, #29
 80013bc:	4313      	orrs	r3, r2
 80013be:	e65d      	b.n	800107c <__aeabi_dsub+0x314>
 80013c0:	074b      	lsls	r3, r1, #29
 80013c2:	08ff      	lsrs	r7, r7, #3
 80013c4:	433b      	orrs	r3, r7
 80013c6:	08cc      	lsrs	r4, r1, #3
 80013c8:	e649      	b.n	800105e <__aeabi_dsub+0x2f6>
 80013ca:	19dc      	adds	r4, r3, r7
 80013cc:	429c      	cmp	r4, r3
 80013ce:	419b      	sbcs	r3, r3
 80013d0:	4461      	add	r1, ip
 80013d2:	4689      	mov	r9, r1
 80013d4:	425b      	negs	r3, r3
 80013d6:	4499      	add	r9, r3
 80013d8:	464b      	mov	r3, r9
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	d400      	bmi.n	80013e0 <__aeabi_dsub+0x678>
 80013de:	e631      	b.n	8001044 <__aeabi_dsub+0x2dc>
 80013e0:	464a      	mov	r2, r9
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <__aeabi_dsub+0x6d8>)
 80013e4:	401a      	ands	r2, r3
 80013e6:	2301      	movs	r3, #1
 80013e8:	4691      	mov	r9, r2
 80013ea:	4698      	mov	r8, r3
 80013ec:	e62a      	b.n	8001044 <__aeabi_dsub+0x2dc>
 80013ee:	0016      	movs	r6, r2
 80013f0:	4664      	mov	r4, ip
 80013f2:	3e20      	subs	r6, #32
 80013f4:	40f4      	lsrs	r4, r6
 80013f6:	46a0      	mov	r8, r4
 80013f8:	2a20      	cmp	r2, #32
 80013fa:	d005      	beq.n	8001408 <__aeabi_dsub+0x6a0>
 80013fc:	2640      	movs	r6, #64	; 0x40
 80013fe:	4664      	mov	r4, ip
 8001400:	1ab2      	subs	r2, r6, r2
 8001402:	4094      	lsls	r4, r2
 8001404:	4323      	orrs	r3, r4
 8001406:	469a      	mov	sl, r3
 8001408:	4654      	mov	r4, sl
 800140a:	1e63      	subs	r3, r4, #1
 800140c:	419c      	sbcs	r4, r3
 800140e:	4643      	mov	r3, r8
 8001410:	431c      	orrs	r4, r3
 8001412:	e5db      	b.n	8000fcc <__aeabi_dsub+0x264>
 8001414:	0002      	movs	r2, r0
 8001416:	2400      	movs	r4, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e548      	b.n	8000eae <__aeabi_dsub+0x146>
 800141c:	19dc      	adds	r4, r3, r7
 800141e:	42bc      	cmp	r4, r7
 8001420:	41bf      	sbcs	r7, r7
 8001422:	4461      	add	r1, ip
 8001424:	4689      	mov	r9, r1
 8001426:	427f      	negs	r7, r7
 8001428:	44b9      	add	r9, r7
 800142a:	e738      	b.n	800129e <__aeabi_dsub+0x536>
 800142c:	464b      	mov	r3, r9
 800142e:	4323      	orrs	r3, r4
 8001430:	d100      	bne.n	8001434 <__aeabi_dsub+0x6cc>
 8001432:	e69f      	b.n	8001174 <__aeabi_dsub+0x40c>
 8001434:	e606      	b.n	8001044 <__aeabi_dsub+0x2dc>
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	000007fe 	.word	0x000007fe
 800143c:	000007ff 	.word	0x000007ff
 8001440:	ff7fffff 	.word	0xff7fffff
 8001444:	08ff      	lsrs	r7, r7, #3
 8001446:	074b      	lsls	r3, r1, #29
 8001448:	433b      	orrs	r3, r7
 800144a:	08cc      	lsrs	r4, r1, #3
 800144c:	e616      	b.n	800107c <__aeabi_dsub+0x314>
 800144e:	4662      	mov	r2, ip
 8001450:	08db      	lsrs	r3, r3, #3
 8001452:	0752      	lsls	r2, r2, #29
 8001454:	4313      	orrs	r3, r2
 8001456:	4662      	mov	r2, ip
 8001458:	08d4      	lsrs	r4, r2, #3
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	0312      	lsls	r2, r2, #12
 800145e:	4214      	tst	r4, r2
 8001460:	d007      	beq.n	8001472 <__aeabi_dsub+0x70a>
 8001462:	08c8      	lsrs	r0, r1, #3
 8001464:	4210      	tst	r0, r2
 8001466:	d104      	bne.n	8001472 <__aeabi_dsub+0x70a>
 8001468:	465d      	mov	r5, fp
 800146a:	0004      	movs	r4, r0
 800146c:	08fb      	lsrs	r3, r7, #3
 800146e:	0749      	lsls	r1, r1, #29
 8001470:	430b      	orrs	r3, r1
 8001472:	0f5a      	lsrs	r2, r3, #29
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	0752      	lsls	r2, r2, #29
 8001478:	08db      	lsrs	r3, r3, #3
 800147a:	4313      	orrs	r3, r2
 800147c:	e5fe      	b.n	800107c <__aeabi_dsub+0x314>
 800147e:	2300      	movs	r3, #0
 8001480:	4a01      	ldr	r2, [pc, #4]	; (8001488 <__aeabi_dsub+0x720>)
 8001482:	001c      	movs	r4, r3
 8001484:	e513      	b.n	8000eae <__aeabi_dsub+0x146>
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	000007ff 	.word	0x000007ff

0800148c <__aeabi_f2d>:
 800148c:	b570      	push	{r4, r5, r6, lr}
 800148e:	0043      	lsls	r3, r0, #1
 8001490:	0246      	lsls	r6, r0, #9
 8001492:	0fc4      	lsrs	r4, r0, #31
 8001494:	20fe      	movs	r0, #254	; 0xfe
 8001496:	0e1b      	lsrs	r3, r3, #24
 8001498:	1c59      	adds	r1, r3, #1
 800149a:	0a75      	lsrs	r5, r6, #9
 800149c:	4208      	tst	r0, r1
 800149e:	d00c      	beq.n	80014ba <__aeabi_f2d+0x2e>
 80014a0:	22e0      	movs	r2, #224	; 0xe0
 80014a2:	0092      	lsls	r2, r2, #2
 80014a4:	4694      	mov	ip, r2
 80014a6:	076d      	lsls	r5, r5, #29
 80014a8:	0b36      	lsrs	r6, r6, #12
 80014aa:	4463      	add	r3, ip
 80014ac:	051b      	lsls	r3, r3, #20
 80014ae:	4333      	orrs	r3, r6
 80014b0:	07e4      	lsls	r4, r4, #31
 80014b2:	4323      	orrs	r3, r4
 80014b4:	0028      	movs	r0, r5
 80014b6:	0019      	movs	r1, r3
 80014b8:	bd70      	pop	{r4, r5, r6, pc}
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d114      	bne.n	80014e8 <__aeabi_f2d+0x5c>
 80014be:	2d00      	cmp	r5, #0
 80014c0:	d01b      	beq.n	80014fa <__aeabi_f2d+0x6e>
 80014c2:	0028      	movs	r0, r5
 80014c4:	f000 f8b2 	bl	800162c <__clzsi2>
 80014c8:	280a      	cmp	r0, #10
 80014ca:	dc1c      	bgt.n	8001506 <__aeabi_f2d+0x7a>
 80014cc:	230b      	movs	r3, #11
 80014ce:	002e      	movs	r6, r5
 80014d0:	1a1b      	subs	r3, r3, r0
 80014d2:	40de      	lsrs	r6, r3
 80014d4:	0003      	movs	r3, r0
 80014d6:	3315      	adds	r3, #21
 80014d8:	409d      	lsls	r5, r3
 80014da:	4a0e      	ldr	r2, [pc, #56]	; (8001514 <__aeabi_f2d+0x88>)
 80014dc:	0336      	lsls	r6, r6, #12
 80014de:	1a12      	subs	r2, r2, r0
 80014e0:	0552      	lsls	r2, r2, #21
 80014e2:	0b36      	lsrs	r6, r6, #12
 80014e4:	0d53      	lsrs	r3, r2, #21
 80014e6:	e7e1      	b.n	80014ac <__aeabi_f2d+0x20>
 80014e8:	2d00      	cmp	r5, #0
 80014ea:	d009      	beq.n	8001500 <__aeabi_f2d+0x74>
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	0b36      	lsrs	r6, r6, #12
 80014f0:	0312      	lsls	r2, r2, #12
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <__aeabi_f2d+0x8c>)
 80014f4:	076d      	lsls	r5, r5, #29
 80014f6:	4316      	orrs	r6, r2
 80014f8:	e7d8      	b.n	80014ac <__aeabi_f2d+0x20>
 80014fa:	2300      	movs	r3, #0
 80014fc:	2600      	movs	r6, #0
 80014fe:	e7d5      	b.n	80014ac <__aeabi_f2d+0x20>
 8001500:	2600      	movs	r6, #0
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <__aeabi_f2d+0x8c>)
 8001504:	e7d2      	b.n	80014ac <__aeabi_f2d+0x20>
 8001506:	0003      	movs	r3, r0
 8001508:	3b0b      	subs	r3, #11
 800150a:	409d      	lsls	r5, r3
 800150c:	002e      	movs	r6, r5
 800150e:	2500      	movs	r5, #0
 8001510:	e7e3      	b.n	80014da <__aeabi_f2d+0x4e>
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	00000389 	.word	0x00000389
 8001518:	000007ff 	.word	0x000007ff

0800151c <__aeabi_d2f>:
 800151c:	0002      	movs	r2, r0
 800151e:	004b      	lsls	r3, r1, #1
 8001520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001522:	0d5b      	lsrs	r3, r3, #21
 8001524:	030c      	lsls	r4, r1, #12
 8001526:	4e3d      	ldr	r6, [pc, #244]	; (800161c <__aeabi_d2f+0x100>)
 8001528:	0a64      	lsrs	r4, r4, #9
 800152a:	0f40      	lsrs	r0, r0, #29
 800152c:	1c5f      	adds	r7, r3, #1
 800152e:	0fc9      	lsrs	r1, r1, #31
 8001530:	4304      	orrs	r4, r0
 8001532:	00d5      	lsls	r5, r2, #3
 8001534:	4237      	tst	r7, r6
 8001536:	d00a      	beq.n	800154e <__aeabi_d2f+0x32>
 8001538:	4839      	ldr	r0, [pc, #228]	; (8001620 <__aeabi_d2f+0x104>)
 800153a:	181e      	adds	r6, r3, r0
 800153c:	2efe      	cmp	r6, #254	; 0xfe
 800153e:	dd16      	ble.n	800156e <__aeabi_d2f+0x52>
 8001540:	20ff      	movs	r0, #255	; 0xff
 8001542:	2400      	movs	r4, #0
 8001544:	05c0      	lsls	r0, r0, #23
 8001546:	4320      	orrs	r0, r4
 8001548:	07c9      	lsls	r1, r1, #31
 800154a:	4308      	orrs	r0, r1
 800154c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154e:	2b00      	cmp	r3, #0
 8001550:	d106      	bne.n	8001560 <__aeabi_d2f+0x44>
 8001552:	432c      	orrs	r4, r5
 8001554:	d026      	beq.n	80015a4 <__aeabi_d2f+0x88>
 8001556:	2205      	movs	r2, #5
 8001558:	0192      	lsls	r2, r2, #6
 800155a:	0a54      	lsrs	r4, r2, #9
 800155c:	b2d8      	uxtb	r0, r3
 800155e:	e7f1      	b.n	8001544 <__aeabi_d2f+0x28>
 8001560:	4325      	orrs	r5, r4
 8001562:	d0ed      	beq.n	8001540 <__aeabi_d2f+0x24>
 8001564:	2080      	movs	r0, #128	; 0x80
 8001566:	03c0      	lsls	r0, r0, #15
 8001568:	4304      	orrs	r4, r0
 800156a:	20ff      	movs	r0, #255	; 0xff
 800156c:	e7ea      	b.n	8001544 <__aeabi_d2f+0x28>
 800156e:	2e00      	cmp	r6, #0
 8001570:	dd1b      	ble.n	80015aa <__aeabi_d2f+0x8e>
 8001572:	0192      	lsls	r2, r2, #6
 8001574:	1e53      	subs	r3, r2, #1
 8001576:	419a      	sbcs	r2, r3
 8001578:	00e4      	lsls	r4, r4, #3
 800157a:	0f6d      	lsrs	r5, r5, #29
 800157c:	4322      	orrs	r2, r4
 800157e:	432a      	orrs	r2, r5
 8001580:	0753      	lsls	r3, r2, #29
 8001582:	d048      	beq.n	8001616 <__aeabi_d2f+0xfa>
 8001584:	230f      	movs	r3, #15
 8001586:	4013      	ands	r3, r2
 8001588:	2b04      	cmp	r3, #4
 800158a:	d000      	beq.n	800158e <__aeabi_d2f+0x72>
 800158c:	3204      	adds	r2, #4
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	04db      	lsls	r3, r3, #19
 8001592:	4013      	ands	r3, r2
 8001594:	d03f      	beq.n	8001616 <__aeabi_d2f+0xfa>
 8001596:	1c70      	adds	r0, r6, #1
 8001598:	2efe      	cmp	r6, #254	; 0xfe
 800159a:	d0d1      	beq.n	8001540 <__aeabi_d2f+0x24>
 800159c:	0192      	lsls	r2, r2, #6
 800159e:	0a54      	lsrs	r4, r2, #9
 80015a0:	b2c0      	uxtb	r0, r0
 80015a2:	e7cf      	b.n	8001544 <__aeabi_d2f+0x28>
 80015a4:	2000      	movs	r0, #0
 80015a6:	2400      	movs	r4, #0
 80015a8:	e7cc      	b.n	8001544 <__aeabi_d2f+0x28>
 80015aa:	0032      	movs	r2, r6
 80015ac:	3217      	adds	r2, #23
 80015ae:	db22      	blt.n	80015f6 <__aeabi_d2f+0xda>
 80015b0:	2080      	movs	r0, #128	; 0x80
 80015b2:	0400      	lsls	r0, r0, #16
 80015b4:	4320      	orrs	r0, r4
 80015b6:	241e      	movs	r4, #30
 80015b8:	1ba4      	subs	r4, r4, r6
 80015ba:	2c1f      	cmp	r4, #31
 80015bc:	dd1d      	ble.n	80015fa <__aeabi_d2f+0xde>
 80015be:	2202      	movs	r2, #2
 80015c0:	4252      	negs	r2, r2
 80015c2:	1b96      	subs	r6, r2, r6
 80015c4:	0002      	movs	r2, r0
 80015c6:	40f2      	lsrs	r2, r6
 80015c8:	0016      	movs	r6, r2
 80015ca:	2c20      	cmp	r4, #32
 80015cc:	d004      	beq.n	80015d8 <__aeabi_d2f+0xbc>
 80015ce:	4a15      	ldr	r2, [pc, #84]	; (8001624 <__aeabi_d2f+0x108>)
 80015d0:	4694      	mov	ip, r2
 80015d2:	4463      	add	r3, ip
 80015d4:	4098      	lsls	r0, r3
 80015d6:	4305      	orrs	r5, r0
 80015d8:	002a      	movs	r2, r5
 80015da:	1e53      	subs	r3, r2, #1
 80015dc:	419a      	sbcs	r2, r3
 80015de:	4332      	orrs	r2, r6
 80015e0:	2600      	movs	r6, #0
 80015e2:	0753      	lsls	r3, r2, #29
 80015e4:	d1ce      	bne.n	8001584 <__aeabi_d2f+0x68>
 80015e6:	2480      	movs	r4, #128	; 0x80
 80015e8:	0013      	movs	r3, r2
 80015ea:	04e4      	lsls	r4, r4, #19
 80015ec:	2001      	movs	r0, #1
 80015ee:	4023      	ands	r3, r4
 80015f0:	4222      	tst	r2, r4
 80015f2:	d1d3      	bne.n	800159c <__aeabi_d2f+0x80>
 80015f4:	e7b0      	b.n	8001558 <__aeabi_d2f+0x3c>
 80015f6:	2300      	movs	r3, #0
 80015f8:	e7ad      	b.n	8001556 <__aeabi_d2f+0x3a>
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <__aeabi_d2f+0x10c>)
 80015fc:	4694      	mov	ip, r2
 80015fe:	002a      	movs	r2, r5
 8001600:	40e2      	lsrs	r2, r4
 8001602:	0014      	movs	r4, r2
 8001604:	002a      	movs	r2, r5
 8001606:	4463      	add	r3, ip
 8001608:	409a      	lsls	r2, r3
 800160a:	4098      	lsls	r0, r3
 800160c:	1e55      	subs	r5, r2, #1
 800160e:	41aa      	sbcs	r2, r5
 8001610:	4302      	orrs	r2, r0
 8001612:	4322      	orrs	r2, r4
 8001614:	e7e4      	b.n	80015e0 <__aeabi_d2f+0xc4>
 8001616:	0033      	movs	r3, r6
 8001618:	e79e      	b.n	8001558 <__aeabi_d2f+0x3c>
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	000007fe 	.word	0x000007fe
 8001620:	fffffc80 	.word	0xfffffc80
 8001624:	fffffca2 	.word	0xfffffca2
 8001628:	fffffc82 	.word	0xfffffc82

0800162c <__clzsi2>:
 800162c:	211c      	movs	r1, #28
 800162e:	2301      	movs	r3, #1
 8001630:	041b      	lsls	r3, r3, #16
 8001632:	4298      	cmp	r0, r3
 8001634:	d301      	bcc.n	800163a <__clzsi2+0xe>
 8001636:	0c00      	lsrs	r0, r0, #16
 8001638:	3910      	subs	r1, #16
 800163a:	0a1b      	lsrs	r3, r3, #8
 800163c:	4298      	cmp	r0, r3
 800163e:	d301      	bcc.n	8001644 <__clzsi2+0x18>
 8001640:	0a00      	lsrs	r0, r0, #8
 8001642:	3908      	subs	r1, #8
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	4298      	cmp	r0, r3
 8001648:	d301      	bcc.n	800164e <__clzsi2+0x22>
 800164a:	0900      	lsrs	r0, r0, #4
 800164c:	3904      	subs	r1, #4
 800164e:	a202      	add	r2, pc, #8	; (adr r2, 8001658 <__clzsi2+0x2c>)
 8001650:	5c10      	ldrb	r0, [r2, r0]
 8001652:	1840      	adds	r0, r0, r1
 8001654:	4770      	bx	lr
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	02020304 	.word	0x02020304
 800165c:	01010101 	.word	0x01010101
	...

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	0002      	movs	r2, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	1dfb      	adds	r3, r7, #7
 8001674:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001676:	1dfb      	adds	r3, r7, #7
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b7f      	cmp	r3, #127	; 0x7f
 800167c:	d828      	bhi.n	80016d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800167e:	4a2f      	ldr	r2, [pc, #188]	; (800173c <__NVIC_SetPriority+0xd4>)
 8001680:	1dfb      	adds	r3, r7, #7
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b25b      	sxtb	r3, r3
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	33c0      	adds	r3, #192	; 0xc0
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	589b      	ldr	r3, [r3, r2]
 800168e:	1dfa      	adds	r2, r7, #7
 8001690:	7812      	ldrb	r2, [r2, #0]
 8001692:	0011      	movs	r1, r2
 8001694:	2203      	movs	r2, #3
 8001696:	400a      	ands	r2, r1
 8001698:	00d2      	lsls	r2, r2, #3
 800169a:	21ff      	movs	r1, #255	; 0xff
 800169c:	4091      	lsls	r1, r2
 800169e:	000a      	movs	r2, r1
 80016a0:	43d2      	mvns	r2, r2
 80016a2:	401a      	ands	r2, r3
 80016a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	019b      	lsls	r3, r3, #6
 80016aa:	22ff      	movs	r2, #255	; 0xff
 80016ac:	401a      	ands	r2, r3
 80016ae:	1dfb      	adds	r3, r7, #7
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	0018      	movs	r0, r3
 80016b4:	2303      	movs	r3, #3
 80016b6:	4003      	ands	r3, r0
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016bc:	481f      	ldr	r0, [pc, #124]	; (800173c <__NVIC_SetPriority+0xd4>)
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	430a      	orrs	r2, r1
 80016c8:	33c0      	adds	r3, #192	; 0xc0
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016ce:	e031      	b.n	8001734 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016d0:	4a1b      	ldr	r2, [pc, #108]	; (8001740 <__NVIC_SetPriority+0xd8>)
 80016d2:	1dfb      	adds	r3, r7, #7
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	0019      	movs	r1, r3
 80016d8:	230f      	movs	r3, #15
 80016da:	400b      	ands	r3, r1
 80016dc:	3b08      	subs	r3, #8
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3306      	adds	r3, #6
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	18d3      	adds	r3, r2, r3
 80016e6:	3304      	adds	r3, #4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	1dfa      	adds	r2, r7, #7
 80016ec:	7812      	ldrb	r2, [r2, #0]
 80016ee:	0011      	movs	r1, r2
 80016f0:	2203      	movs	r2, #3
 80016f2:	400a      	ands	r2, r1
 80016f4:	00d2      	lsls	r2, r2, #3
 80016f6:	21ff      	movs	r1, #255	; 0xff
 80016f8:	4091      	lsls	r1, r2
 80016fa:	000a      	movs	r2, r1
 80016fc:	43d2      	mvns	r2, r2
 80016fe:	401a      	ands	r2, r3
 8001700:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	019b      	lsls	r3, r3, #6
 8001706:	22ff      	movs	r2, #255	; 0xff
 8001708:	401a      	ands	r2, r3
 800170a:	1dfb      	adds	r3, r7, #7
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	0018      	movs	r0, r3
 8001710:	2303      	movs	r3, #3
 8001712:	4003      	ands	r3, r0
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001718:	4809      	ldr	r0, [pc, #36]	; (8001740 <__NVIC_SetPriority+0xd8>)
 800171a:	1dfb      	adds	r3, r7, #7
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	001c      	movs	r4, r3
 8001720:	230f      	movs	r3, #15
 8001722:	4023      	ands	r3, r4
 8001724:	3b08      	subs	r3, #8
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	430a      	orrs	r2, r1
 800172a:	3306      	adds	r3, #6
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	18c3      	adds	r3, r0, r3
 8001730:	3304      	adds	r3, #4
 8001732:	601a      	str	r2, [r3, #0]
}
 8001734:	46c0      	nop			; (mov r8, r8)
 8001736:	46bd      	mov	sp, r7
 8001738:	b003      	add	sp, #12
 800173a:	bd90      	pop	{r4, r7, pc}
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a03      	ldr	r2, [pc, #12]	; (8001760 <LL_I2C_EnableClockStretching+0x1c>)
 8001752:	401a      	ands	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	601a      	str	r2, [r3, #0]
}
 8001758:	46c0      	nop			; (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	b002      	add	sp, #8
 800175e:	bd80      	pop	{r7, pc}
 8001760:	fffdffff 	.word	0xfffdffff

08001764 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a03      	ldr	r2, [pc, #12]	; (8001780 <LL_I2C_DisableGeneralCall+0x1c>)
 8001772:	401a      	ands	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	601a      	str	r2, [r3, #0]
}
 8001778:	46c0      	nop			; (mov r8, r8)
 800177a:	46bd      	mov	sp, r7
 800177c:	b002      	add	sp, #8
 800177e:	bd80      	pop	{r7, pc}
 8001780:	fff7ffff 	.word	0xfff7ffff

08001784 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4a05      	ldr	r2, [pc, #20]	; (80017ac <LL_I2C_SetOwnAddress2+0x28>)
 8001796:	401a      	ands	r2, r3
 8001798:	68b9      	ldr	r1, [r7, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	430b      	orrs	r3, r1
 800179e:	431a      	orrs	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	60da      	str	r2, [r3, #12]
}
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b004      	add	sp, #16
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	fffff801 	.word	0xfffff801

080017b0 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4a03      	ldr	r2, [pc, #12]	; (80017cc <LL_I2C_DisableOwnAddress2+0x1c>)
 80017be:	401a      	ands	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	60da      	str	r2, [r3, #12]
}
 80017c4:	46c0      	nop			; (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b002      	add	sp, #8
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	ffff7fff 	.word	0xffff7fff

080017d0 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2202      	movs	r2, #2
 80017de:	4013      	ands	r3, r2
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d101      	bne.n	80017e8 <LL_I2C_IsActiveFlag_TXIS+0x18>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	0018      	movs	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b002      	add	sp, #8
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	2204      	movs	r2, #4
 8001800:	4013      	ands	r3, r2
 8001802:	2b04      	cmp	r3, #4
 8001804:	d101      	bne.n	800180a <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800180a:	2300      	movs	r3, #0
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b002      	add	sp, #8
 8001812:	bd80      	pop	{r7, pc}

08001814 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	2220      	movs	r2, #32
 8001822:	4013      	ands	r3, r2
 8001824:	2b20      	cmp	r3, #32
 8001826:	d101      	bne.n	800182c <LL_I2C_IsActiveFlag_STOP+0x18>
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <LL_I2C_IsActiveFlag_STOP+0x1a>
 800182c:	2300      	movs	r3, #0
}
 800182e:	0018      	movs	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	b002      	add	sp, #8
 8001834:	bd80      	pop	{r7, pc}

08001836 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	2220      	movs	r2, #32
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	61da      	str	r2, [r3, #28]
}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	46bd      	mov	sp, r7
 800184e:	b002      	add	sp, #8
 8001850:	bd80      	pop	{r7, pc}

08001852 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2280      	movs	r2, #128	; 0x80
 8001860:	0492      	lsls	r2, r2, #18
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	605a      	str	r2, [r3, #4]
}
 8001868:	46c0      	nop			; (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	b002      	add	sp, #8
 800186e:	bd80      	pop	{r7, pc}

08001870 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	0d51      	lsrs	r1, r2, #21
 8001886:	2280      	movs	r2, #128	; 0x80
 8001888:	00d2      	lsls	r2, r2, #3
 800188a:	400a      	ands	r2, r1
 800188c:	490a      	ldr	r1, [pc, #40]	; (80018b8 <LL_I2C_HandleTransfer+0x48>)
 800188e:	430a      	orrs	r2, r1
 8001890:	43d2      	mvns	r2, r2
 8001892:	401a      	ands	r2, r3
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4319      	orrs	r1, r3
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	041b      	lsls	r3, r3, #16
 800189e:	4319      	orrs	r1, r3
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	4319      	orrs	r1, r3
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	430b      	orrs	r3, r1
 80018a8:	431a      	orrs	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b004      	add	sp, #16
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	03ff7bff 	.word	0x03ff7bff

080018bc <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	b2db      	uxtb	r3, r3
}
 80018ca:	0018      	movs	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b002      	add	sp, #8
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	000a      	movs	r2, r1
 80018dc:	1cfb      	adds	r3, r7, #3
 80018de:	701a      	strb	r2, [r3, #0]
  WRITE_REG(I2Cx->TXDR, Data);
 80018e0:	1cfb      	adds	r3, r7, #3
 80018e2:	781a      	ldrb	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018e8:	46c0      	nop			; (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b002      	add	sp, #8
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <LL_RCC_HSE_EnableCSS>:
  * @brief  Enable the Clock Security System.
  * @rmtoll CR           CSSON         LL_RCC_HSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableCSS(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <LL_RCC_HSE_EnableCSS+0x18>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <LL_RCC_HSE_EnableCSS+0x18>)
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	0309      	lsls	r1, r1, #12
 80018fe:	430a      	orrs	r2, r1
 8001900:	601a      	str	r2, [r3, #0]
}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40021000 	.word	0x40021000

0800190c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <LL_RCC_HSE_Enable+0x18>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <LL_RCC_HSE_Enable+0x18>)
 8001916:	2180      	movs	r1, #128	; 0x80
 8001918:	0249      	lsls	r1, r1, #9
 800191a:	430a      	orrs	r2, r1
 800191c:	601a      	str	r2, [r3, #0]
}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000

08001928 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <LL_RCC_HSE_IsReady+0x20>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	029b      	lsls	r3, r3, #10
 8001934:	4013      	ands	r3, r2
 8001936:	4a05      	ldr	r2, [pc, #20]	; (800194c <LL_RCC_HSE_IsReady+0x24>)
 8001938:	4694      	mov	ip, r2
 800193a:	4463      	add	r3, ip
 800193c:	425a      	negs	r2, r3
 800193e:	4153      	adcs	r3, r2
 8001940:	b2db      	uxtb	r3, r3
}
 8001942:	0018      	movs	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40021000 	.word	0x40021000
 800194c:	fffe0000 	.word	0xfffe0000

08001950 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <LL_RCC_HSI_Enable+0x18>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <LL_RCC_HSI_Enable+0x18>)
 800195a:	2101      	movs	r1, #1
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]
}
 8001960:	46c0      	nop			; (mov r8, r8)
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	40021000 	.word	0x40021000

0800196c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <LL_RCC_HSI_IsReady+0x1c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2202      	movs	r2, #2
 8001976:	4013      	ands	r3, r2
 8001978:	3b02      	subs	r3, #2
 800197a:	425a      	negs	r2, r3
 800197c:	4153      	adcs	r3, r2
 800197e:	b2db      	uxtb	r3, r3
}
 8001980:	0018      	movs	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	40021000 	.word	0x40021000

0800198c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	22f8      	movs	r2, #248	; 0xf8
 800199a:	4393      	bics	r3, r2
 800199c:	0019      	movs	r1, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	00da      	lsls	r2, r3, #3
 80019a2:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80019a4:	430a      	orrs	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]
}
 80019a8:	46c0      	nop			; (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b002      	add	sp, #8
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021000 	.word	0x40021000

080019b4 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <LL_RCC_SetSysClkSource+0x24>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2203      	movs	r2, #3
 80019c2:	4393      	bics	r3, r2
 80019c4:	0019      	movs	r1, r3
 80019c6:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <LL_RCC_SetSysClkSource+0x24>)
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	605a      	str	r2, [r3, #4]
}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b002      	add	sp, #8
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	40021000 	.word	0x40021000

080019dc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <LL_RCC_GetSysClkSource+0x14>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	220c      	movs	r2, #12
 80019e6:	4013      	ands	r3, r2
}
 80019e8:	0018      	movs	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	40021000 	.word	0x40021000

080019f4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <LL_RCC_SetAHBPrescaler+0x24>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	22f0      	movs	r2, #240	; 0xf0
 8001a02:	4393      	bics	r3, r2
 8001a04:	0019      	movs	r1, r3
 8001a06:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <LL_RCC_SetAHBPrescaler+0x24>)
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	605a      	str	r2, [r3, #4]
}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b002      	add	sp, #8
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	40021000 	.word	0x40021000

08001a1c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <LL_RCC_SetAPB1Prescaler+0x28>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	605a      	str	r2, [r3, #4]
}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b002      	add	sp, #8
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	40021000 	.word	0x40021000
 8001a44:	fffff8ff 	.word	0xfffff8ff

08001a48 <LL_RCC_SetI2CClockSource>:
  *         @arg @ref LL_RCC_I2C1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_I2C1_CLKSOURCE_SYSCLK
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, RCC_CFGR3_I2C1SW, I2CxSource);
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <LL_RCC_SetI2CClockSource+0x24>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	2210      	movs	r2, #16
 8001a56:	4393      	bics	r3, r2
 8001a58:	0019      	movs	r1, r3
 8001a5a:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <LL_RCC_SetI2CClockSource+0x24>)
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b002      	add	sp, #8
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	40021000 	.word	0x40021000

08001a70 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <LL_RCC_PLL_Enable+0x18>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <LL_RCC_PLL_Enable+0x18>)
 8001a7a:	2180      	movs	r1, #128	; 0x80
 8001a7c:	0449      	lsls	r1, r1, #17
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]
}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000

08001a8c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001a90:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <LL_RCC_PLL_IsReady+0x24>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	049b      	lsls	r3, r3, #18
 8001a98:	4013      	ands	r3, r2
 8001a9a:	22fe      	movs	r2, #254	; 0xfe
 8001a9c:	0612      	lsls	r2, r2, #24
 8001a9e:	4694      	mov	ip, r2
 8001aa0:	4463      	add	r3, ip
 8001aa2:	425a      	negs	r2, r3
 8001aa4:	4153      	adcs	r3, r2
 8001aa6:	b2db      	uxtb	r3, r3
}
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	025b      	lsls	r3, r3, #9
 8001ace:	401a      	ands	r2, r3
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ade:	220f      	movs	r2, #15
 8001ae0:	4393      	bics	r3, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	401a      	ands	r2, r3
 8001aea:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001aec:	430a      	orrs	r2, r1
 8001aee:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001af0:	46c0      	nop			; (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b002      	add	sp, #8
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40021000 	.word	0x40021000
 8001afc:	ffc2ffff 	.word	0xffc2ffff

08001b00 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001b0a:	6959      	ldr	r1, [r3, #20]
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
}
 8001b20:	46c0      	nop			; (mov r8, r8)
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b004      	add	sp, #16
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40021000 	.word	0x40021000

08001b2c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001b34:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <LL_APB1_GRP1_EnableClock+0x28>)
 8001b36:	69d9      	ldr	r1, [r3, #28]
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <LL_APB1_GRP1_EnableClock+0x28>)
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <LL_APB1_GRP1_EnableClock+0x28>)
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	4013      	ands	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
}
 8001b4c:	46c0      	nop			; (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b004      	add	sp, #16
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40021000 	.word	0x40021000

08001b58 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <LL_APB1_GRP2_EnableClock+0x28>)
 8001b62:	6999      	ldr	r1, [r3, #24]
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <LL_APB1_GRP2_EnableClock+0x28>)
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <LL_APB1_GRP2_EnableClock+0x28>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	4013      	ands	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b76:	68fb      	ldr	r3, [r7, #12]
}
 8001b78:	46c0      	nop			; (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b004      	add	sp, #16
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40021000 	.word	0x40021000

08001b84 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <LL_FLASH_SetLatency+0x24>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2201      	movs	r2, #1
 8001b92:	4393      	bics	r3, r2
 8001b94:	0019      	movs	r1, r3
 8001b96:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <LL_FLASH_SetLatency+0x24>)
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	601a      	str	r2, [r3, #0]
}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b002      	add	sp, #8
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	40022000 	.word	0x40022000

08001bac <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <LL_FLASH_GetLatency+0x14>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4013      	ands	r3, r2
}
 8001bb8:	0018      	movs	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	40022000 	.word	0x40022000

08001bc4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	619a      	str	r2, [r3, #24]
}
 8001bd4:	46c0      	nop			; (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b002      	add	sp, #8
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bec:	46c0      	nop			; (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b002      	add	sp, #8
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <AHT20_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void AHT20_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af02      	add	r7, sp, #8
    uint8_t init_cmd[] = {AHT20_INIT_CMD, 0x08, 0x00};
 8001bfa:	003b      	movs	r3, r7
 8001bfc:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <AHT20_Init+0x90>)
 8001bfe:	8811      	ldrh	r1, [r2, #0]
 8001c00:	8019      	strh	r1, [r3, #0]
 8001c02:	7892      	ldrb	r2, [r2, #2]
 8001c04:	709a      	strb	r2, [r3, #2]
    uint8_t cmd_length = sizeof(init_cmd) / sizeof(init_cmd[0]);
 8001c06:	1dbb      	adds	r3, r7, #6
 8001c08:	2203      	movs	r2, #3
 8001c0a:	701a      	strb	r2, [r3, #0]

    LL_I2C_HandleTransfer(I2C1, AHT20_I2C_ADDRESS, LL_I2C_ADDRSLAVE_7BIT, cmd_length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001c0c:	1dbb      	adds	r3, r7, #6
 8001c0e:	781a      	ldrb	r2, [r3, #0]
 8001c10:	481d      	ldr	r0, [pc, #116]	; (8001c88 <AHT20_Init+0x94>)
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <AHT20_Init+0x98>)
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	049b      	lsls	r3, r3, #18
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	0013      	movs	r3, r2
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2170      	movs	r1, #112	; 0x70
 8001c22:	f7ff fe25 	bl	8001870 <LL_I2C_HandleTransfer>
    for (uint8_t i = 0; i < cmd_length; i++)
 8001c26:	1dfb      	adds	r3, r7, #7
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
 8001c2c:	e014      	b.n	8001c58 <AHT20_Init+0x64>
    {
        while (!LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <AHT20_Init+0x94>)
 8001c32:	0018      	movs	r0, r3
 8001c34:	f7ff fdcc 	bl	80017d0 <LL_I2C_IsActiveFlag_TXIS>
 8001c38:	1e03      	subs	r3, r0, #0
 8001c3a:	d0f9      	beq.n	8001c30 <AHT20_Init+0x3c>
        {
        }
        LL_I2C_TransmitData8(I2C1, init_cmd[i]);
 8001c3c:	1dfb      	adds	r3, r7, #7
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	003a      	movs	r2, r7
 8001c42:	5cd3      	ldrb	r3, [r2, r3]
 8001c44:	4a10      	ldr	r2, [pc, #64]	; (8001c88 <AHT20_Init+0x94>)
 8001c46:	0019      	movs	r1, r3
 8001c48:	0010      	movs	r0, r2
 8001c4a:	f7ff fe42 	bl	80018d2 <LL_I2C_TransmitData8>
    for (uint8_t i = 0; i < cmd_length; i++)
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	1dfb      	adds	r3, r7, #7
 8001c54:	3201      	adds	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
 8001c58:	1dfa      	adds	r2, r7, #7
 8001c5a:	1dbb      	adds	r3, r7, #6
 8001c5c:	7812      	ldrb	r2, [r2, #0]
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d3e4      	bcc.n	8001c2e <AHT20_Init+0x3a>
    }
    while (!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <AHT20_Init+0x94>)
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f7ff fdd3 	bl	8001814 <LL_I2C_IsActiveFlag_STOP>
 8001c6e:	1e03      	subs	r3, r0, #0
 8001c70:	d0f9      	beq.n	8001c66 <AHT20_Init+0x72>
    {
    }
    LL_I2C_ClearFlag_STOP(I2C1);
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <AHT20_Init+0x94>)
 8001c74:	0018      	movs	r0, r3
 8001c76:	f7ff fdde 	bl	8001836 <LL_I2C_ClearFlag_STOP>
}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b002      	add	sp, #8
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	080026d4 	.word	0x080026d4
 8001c88:	40005400 	.word	0x40005400
 8001c8c:	80002000 	.word	0x80002000

08001c90 <AHT20_StartMeasurement>:

void AHT20_StartMeasurement(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af02      	add	r7, sp, #8
 uint8_t start_measurement_cmd[] = {AHT20_START_MEASUREMENT_CMD, 0x33, 0x00};
 8001c96:	003b      	movs	r3, r7
 8001c98:	4a21      	ldr	r2, [pc, #132]	; (8001d20 <AHT20_StartMeasurement+0x90>)
 8001c9a:	8811      	ldrh	r1, [r2, #0]
 8001c9c:	8019      	strh	r1, [r3, #0]
 8001c9e:	7892      	ldrb	r2, [r2, #2]
 8001ca0:	709a      	strb	r2, [r3, #2]
    uint8_t cmd_length = sizeof(start_measurement_cmd) / sizeof(start_measurement_cmd[0]);
 8001ca2:	1dbb      	adds	r3, r7, #6
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	701a      	strb	r2, [r3, #0]

    LL_I2C_HandleTransfer(I2C1, AHT20_I2C_ADDRESS, LL_I2C_ADDRSLAVE_7BIT, cmd_length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001ca8:	1dbb      	adds	r3, r7, #6
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	481d      	ldr	r0, [pc, #116]	; (8001d24 <AHT20_StartMeasurement+0x94>)
 8001cae:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <AHT20_StartMeasurement+0x98>)
 8001cb0:	9301      	str	r3, [sp, #4]
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	049b      	lsls	r3, r3, #18
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	0013      	movs	r3, r2
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2170      	movs	r1, #112	; 0x70
 8001cbe:	f7ff fdd7 	bl	8001870 <LL_I2C_HandleTransfer>
    for (uint8_t i = 0; i < cmd_length; i++)
 8001cc2:	1dfb      	adds	r3, r7, #7
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
 8001cc8:	e014      	b.n	8001cf4 <AHT20_StartMeasurement+0x64>
    {
        while (!LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <AHT20_StartMeasurement+0x94>)
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f7ff fd7e 	bl	80017d0 <LL_I2C_IsActiveFlag_TXIS>
 8001cd4:	1e03      	subs	r3, r0, #0
 8001cd6:	d0f9      	beq.n	8001ccc <AHT20_StartMeasurement+0x3c>
        {
        }
        LL_I2C_TransmitData8(I2C1, start_measurement_cmd[i]);
 8001cd8:	1dfb      	adds	r3, r7, #7
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	003a      	movs	r2, r7
 8001cde:	5cd3      	ldrb	r3, [r2, r3]
 8001ce0:	4a10      	ldr	r2, [pc, #64]	; (8001d24 <AHT20_StartMeasurement+0x94>)
 8001ce2:	0019      	movs	r1, r3
 8001ce4:	0010      	movs	r0, r2
 8001ce6:	f7ff fdf4 	bl	80018d2 <LL_I2C_TransmitData8>
    for (uint8_t i = 0; i < cmd_length; i++)
 8001cea:	1dfb      	adds	r3, r7, #7
 8001cec:	781a      	ldrb	r2, [r3, #0]
 8001cee:	1dfb      	adds	r3, r7, #7
 8001cf0:	3201      	adds	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]
 8001cf4:	1dfa      	adds	r2, r7, #7
 8001cf6:	1dbb      	adds	r3, r7, #6
 8001cf8:	7812      	ldrb	r2, [r2, #0]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d3e4      	bcc.n	8001cca <AHT20_StartMeasurement+0x3a>
    }
    while (!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001d00:	46c0      	nop			; (mov r8, r8)
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <AHT20_StartMeasurement+0x94>)
 8001d04:	0018      	movs	r0, r3
 8001d06:	f7ff fd85 	bl	8001814 <LL_I2C_IsActiveFlag_STOP>
 8001d0a:	1e03      	subs	r3, r0, #0
 8001d0c:	d0f9      	beq.n	8001d02 <AHT20_StartMeasurement+0x72>
    {
    }
    LL_I2C_ClearFlag_STOP(I2C1);
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <AHT20_StartMeasurement+0x94>)
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7ff fd90 	bl	8001836 <LL_I2C_ClearFlag_STOP>
}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b002      	add	sp, #8
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	080026d8 	.word	0x080026d8
 8001d24:	40005400 	.word	0x40005400
 8001d28:	80002000 	.word	0x80002000

08001d2c <AHT20_ReadData>:

void AHT20_ReadData(uint8_t *data)
{
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	6078      	str	r0, [r7, #4]
    LL_I2C_HandleTransfer(I2C1, AHT20_I2C_ADDRESS, LL_I2C_ADDRSLAVE_7BIT, 6, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001d34:	4814      	ldr	r0, [pc, #80]	; (8001d88 <AHT20_ReadData+0x5c>)
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <AHT20_ReadData+0x60>)
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	2380      	movs	r3, #128	; 0x80
 8001d3c:	049b      	lsls	r3, r3, #18
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2306      	movs	r3, #6
 8001d42:	2200      	movs	r2, #0
 8001d44:	2170      	movs	r1, #112	; 0x70
 8001d46:	f7ff fd93 	bl	8001870 <LL_I2C_HandleTransfer>
    while (!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001d4a:	e00e      	b.n	8001d6a <AHT20_ReadData+0x3e>
    {
        if (LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <AHT20_ReadData+0x5c>)
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f7ff fd4f 	bl	80017f2 <LL_I2C_IsActiveFlag_RXNE>
 8001d54:	1e03      	subs	r3, r0, #0
 8001d56:	d008      	beq.n	8001d6a <AHT20_ReadData+0x3e>
        {
            *data++ = LL_I2C_ReceiveData8(I2C1);
 8001d58:	687c      	ldr	r4, [r7, #4]
 8001d5a:	1c63      	adds	r3, r4, #1
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <AHT20_ReadData+0x5c>)
 8001d60:	0018      	movs	r0, r3
 8001d62:	f7ff fdab 	bl	80018bc <LL_I2C_ReceiveData8>
 8001d66:	0003      	movs	r3, r0
 8001d68:	7023      	strb	r3, [r4, #0]
    while (!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <AHT20_ReadData+0x5c>)
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7ff fd51 	bl	8001814 <LL_I2C_IsActiveFlag_STOP>
 8001d72:	1e03      	subs	r3, r0, #0
 8001d74:	d0ea      	beq.n	8001d4c <AHT20_ReadData+0x20>
        }
    }
    LL_I2C_ClearFlag_STOP(I2C1);
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <AHT20_ReadData+0x5c>)
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f7ff fd5c 	bl	8001836 <LL_I2C_ClearFlag_STOP>
}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b003      	add	sp, #12
 8001d84:	bd90      	pop	{r4, r7, pc}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	40005400 	.word	0x40005400
 8001d8c:	80002400 	.word	0x80002400

08001d90 <AHT20_GetTemperature>:

float AHT20_GetTemperature(uint8_t *data)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
    uint32_t raw_temperature = ((uint32_t)(data[3] & 0x0F) << 16) | ((uint32_t)data[4] << 8) | data[5];
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3303      	adds	r3, #3
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	041a      	lsls	r2, r3, #16
 8001da0:	23f0      	movs	r3, #240	; 0xf0
 8001da2:	031b      	lsls	r3, r3, #12
 8001da4:	401a      	ands	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3304      	adds	r3, #4
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	4313      	orrs	r3, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	3205      	adds	r2, #5
 8001db4:	7812      	ldrb	r2, [r2, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
    return ((float)raw_temperature * 200.0 / 1048576.0) - 50.0;
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f7fe fa30 	bl	8000220 <__aeabi_ui2f>
 8001dc0:	1c03      	adds	r3, r0, #0
 8001dc2:	1c18      	adds	r0, r3, #0
 8001dc4:	f7ff fb62 	bl	800148c <__aeabi_f2d>
 8001dc8:	2200      	movs	r2, #0
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <AHT20_GetTemperature+0x78>)
 8001dcc:	f7fe fd60 	bl	8000890 <__aeabi_dmul>
 8001dd0:	0002      	movs	r2, r0
 8001dd2:	000b      	movs	r3, r1
 8001dd4:	0010      	movs	r0, r2
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	2200      	movs	r2, #0
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <AHT20_GetTemperature+0x7c>)
 8001ddc:	f7fe fa62 	bl	80002a4 <__aeabi_ddiv>
 8001de0:	0002      	movs	r2, r0
 8001de2:	000b      	movs	r3, r1
 8001de4:	0010      	movs	r0, r2
 8001de6:	0019      	movs	r1, r3
 8001de8:	2200      	movs	r2, #0
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <AHT20_GetTemperature+0x80>)
 8001dec:	f7fe ffbc 	bl	8000d68 <__aeabi_dsub>
 8001df0:	0002      	movs	r2, r0
 8001df2:	000b      	movs	r3, r1
 8001df4:	0010      	movs	r0, r2
 8001df6:	0019      	movs	r1, r3
 8001df8:	f7ff fb90 	bl	800151c <__aeabi_d2f>
 8001dfc:	1c03      	adds	r3, r0, #0
}
 8001dfe:	1c18      	adds	r0, r3, #0
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b004      	add	sp, #16
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	40690000 	.word	0x40690000
 8001e0c:	41300000 	.word	0x41300000
 8001e10:	40490000 	.word	0x40490000

08001e14 <AHT20_GetHumidity>:

float AHT20_GetHumidity(uint8_t *data)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
    uint32_t raw_humidity = ((uint32_t)data[1] << 12) | ((uint32_t)data[2] << 4) | (data[3] >> 4);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	031a      	lsls	r2, r3, #12
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3302      	adds	r3, #2
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	3203      	adds	r2, #3
 8001e32:	7812      	ldrb	r2, [r2, #0]
 8001e34:	0912      	lsrs	r2, r2, #4
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
    return (float)raw_humidity * 100.0 / 1048576.0;
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f7fe f9ef 	bl	8000220 <__aeabi_ui2f>
 8001e42:	1c03      	adds	r3, r0, #0
 8001e44:	1c18      	adds	r0, r3, #0
 8001e46:	f7ff fb21 	bl	800148c <__aeabi_f2d>
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <AHT20_GetHumidity+0x64>)
 8001e4e:	f7fe fd1f 	bl	8000890 <__aeabi_dmul>
 8001e52:	0002      	movs	r2, r0
 8001e54:	000b      	movs	r3, r1
 8001e56:	0010      	movs	r0, r2
 8001e58:	0019      	movs	r1, r3
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <AHT20_GetHumidity+0x68>)
 8001e5e:	f7fe fa21 	bl	80002a4 <__aeabi_ddiv>
 8001e62:	0002      	movs	r2, r0
 8001e64:	000b      	movs	r3, r1
 8001e66:	0010      	movs	r0, r2
 8001e68:	0019      	movs	r1, r3
 8001e6a:	f7ff fb57 	bl	800151c <__aeabi_d2f>
 8001e6e:	1c03      	adds	r3, r0, #0
}
 8001e70:	1c18      	adds	r0, r3, #0
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b004      	add	sp, #16
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40590000 	.word	0x40590000
 8001e7c:	41300000 	.word	0x41300000

08001e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 8001e84:	2001      	movs	r0, #1
 8001e86:	f7ff fe67 	bl	8001b58 <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	055b      	lsls	r3, r3, #21
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f7ff fe4c 	bl	8001b2c <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 3);
 8001e94:	2301      	movs	r3, #1
 8001e96:	425b      	negs	r3, r3
 8001e98:	2103      	movs	r1, #3
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f7ff fbe4 	bl	8001668 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ea0:	f000 f838 	bl	8001f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ea4:	f000 f90e 	bl	80020c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001ea8:	f000 f884 	bl	8001fb4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  AHT20_Init();
 8001eac:	f7ff fea2 	bl	8001bf4 <AHT20_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  AHT20_StartMeasurement();
 8001eb0:	f7ff feee 	bl	8001c90 <AHT20_StartMeasurement>
	  LL_mDelay(100); // Wait for the measurement to complete
 8001eb4:	2064      	movs	r0, #100	; 0x64
 8001eb6:	f000 fba5 	bl	8002604 <LL_mDelay>
	  AHT20_ReadData(data);
 8001eba:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <main+0x88>)
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7ff ff35 	bl	8001d2c <AHT20_ReadData>
      temperature = AHT20_GetTemperature(data);
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <main+0x88>)
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7ff ff63 	bl	8001d90 <AHT20_GetTemperature>
 8001eca:	1c02      	adds	r2, r0, #0
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <main+0x8c>)
 8001ece:	601a      	str	r2, [r3, #0]
	  humidity = AHT20_GetHumidity(data);
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <main+0x88>)
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f7ff ff9e 	bl	8001e14 <AHT20_GetHumidity>
 8001ed8:	1c02      	adds	r2, r0, #0
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <main+0x90>)
 8001edc:	601a      	str	r2, [r3, #0]
	  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_15);
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	021a      	lsls	r2, r3, #8
 8001ee2:	2390      	movs	r3, #144	; 0x90
 8001ee4:	05db      	lsls	r3, r3, #23
 8001ee6:	0011      	movs	r1, r2
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f7ff fe6b 	bl	8001bc4 <LL_GPIO_SetOutputPin>
	  LL_mDelay(100);
 8001eee:	2064      	movs	r0, #100	; 0x64
 8001ef0:	f000 fb88 	bl	8002604 <LL_mDelay>
	  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_15);
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	021a      	lsls	r2, r3, #8
 8001ef8:	2390      	movs	r3, #144	; 0x90
 8001efa:	05db      	lsls	r3, r3, #23
 8001efc:	0011      	movs	r1, r2
 8001efe:	0018      	movs	r0, r3
 8001f00:	f7ff fe6c 	bl	8001bdc <LL_GPIO_ResetOutputPin>
	  AHT20_StartMeasurement();
 8001f04:	e7d4      	b.n	8001eb0 <main+0x30>
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	20000020 	.word	0x20000020
 8001f0c:	20000028 	.word	0x20000028
 8001f10:	2000002c 	.word	0x2000002c

08001f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f7ff fe33 	bl	8001b84 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	f7ff fe44 	bl	8001bac <LL_FLASH_GetLatency>
 8001f24:	0003      	movs	r3, r0
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d1fa      	bne.n	8001f20 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8001f2a:	f7ff fcef 	bl	800190c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	f7ff fcfa 	bl	8001928 <LL_RCC_HSE_IsReady>
 8001f34:	0003      	movs	r3, r0
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d1fa      	bne.n	8001f30 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_Enable();
 8001f3a:	f7ff fd09 	bl	8001950 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	f7ff fd14 	bl	800196c <LL_RCC_HSI_IsReady>
 8001f44:	0003      	movs	r3, r0
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d1fa      	bne.n	8001f40 <SystemClock_Config+0x2c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001f4a:	2010      	movs	r0, #16
 8001f4c:	f7ff fd1e 	bl	800198c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSE_EnableCSS();
 8001f50:	f7ff fcce 	bl	80018f0 <LL_RCC_HSE_EnableCSS>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_6);
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	035a      	lsls	r2, r3, #13
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	025b      	lsls	r3, r3, #9
 8001f5c:	0011      	movs	r1, r2
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7ff fda8 	bl	8001ab4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001f64:	f7ff fd84 	bl	8001a70 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001f68:	46c0      	nop			; (mov r8, r8)
 8001f6a:	f7ff fd8f 	bl	8001a8c <LL_RCC_PLL_IsReady>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d1fa      	bne.n	8001f6a <SystemClock_Config+0x56>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001f74:	2000      	movs	r0, #0
 8001f76:	f7ff fd3d 	bl	80019f4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f7ff fd4e 	bl	8001a1c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001f80:	2002      	movs	r0, #2
 8001f82:	f7ff fd17 	bl	80019b4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	f7ff fd28 	bl	80019dc <LL_RCC_GetSysClkSource>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d1fa      	bne.n	8001f88 <SystemClock_Config+0x74>
  {

  }
  LL_Init1msTick(48000000);
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <SystemClock_Config+0x9c>)
 8001f94:	0018      	movs	r0, r3
 8001f96:	f000 fb25 	bl	80025e4 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <SystemClock_Config+0x9c>)
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f000 fb53 	bl	8002648 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7ff fd50 	bl	8001a48 <LL_RCC_SetI2CClockSource>
}
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	02dc6c00 	.word	0x02dc6c00

08001fb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b08f      	sub	sp, #60	; 0x3c
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001fba:	241c      	movs	r4, #28
 8001fbc:	193b      	adds	r3, r7, r4
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	231c      	movs	r3, #28
 8001fc2:	001a      	movs	r2, r3
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	f000 fb71 	bl	80026ac <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	0018      	movs	r0, r3
 8001fce:	2318      	movs	r3, #24
 8001fd0:	001a      	movs	r2, r3
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	f000 fb6a 	bl	80026ac <memset>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	02db      	lsls	r3, r3, #11
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f7ff fd8f 	bl	8001b00 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	2240      	movs	r2, #64	; 0x40
 8001fe6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	2202      	movs	r2, #2
 8001fec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	2201      	movs	r2, #1
 8002004:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	4a2b      	ldr	r2, [pc, #172]	; (80020b8 <MX_I2C1_Init+0x104>)
 800200a:	0019      	movs	r1, r3
 800200c:	0010      	movs	r0, r2
 800200e:	f000 f991 	bl	8002334 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	2280      	movs	r2, #128	; 0x80
 8002016:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	2202      	movs	r2, #2
 800201c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	2203      	movs	r2, #3
 8002022:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	2201      	movs	r2, #1
 8002028:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	2201      	movs	r2, #1
 8002034:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	4a1f      	ldr	r2, [pc, #124]	; (80020b8 <MX_I2C1_Init+0x104>)
 800203a:	0019      	movs	r1, r3
 800203c:	0010      	movs	r0, r2
 800203e:	f000 f979 	bl	8002334 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002042:	2380      	movs	r3, #128	; 0x80
 8002044:	039b      	lsls	r3, r3, #14
 8002046:	0018      	movs	r0, r3
 8002048:	f7ff fd70 	bl	8001b2c <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 800204c:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <MX_I2C1_Init+0x108>)
 800204e:	0018      	movs	r0, r3
 8002050:	f7ff fbae 	bl	80017b0 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <MX_I2C1_Init+0x108>)
 8002056:	0018      	movs	r0, r3
 8002058:	f7ff fb84 	bl	8001764 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800205c:	4b17      	ldr	r3, [pc, #92]	; (80020bc <MX_I2C1_Init+0x108>)
 800205e:	0018      	movs	r0, r3
 8002060:	f7ff fb70 	bl	8001744 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002064:	0021      	movs	r1, r4
 8002066:	187b      	adds	r3, r7, r1
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
  I2C_InitStruct.Timing = 0x2000090E;
 800206c:	187b      	adds	r3, r7, r1
 800206e:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <MX_I2C1_Init+0x10c>)
 8002070:	605a      	str	r2, [r3, #4]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8002072:	187b      	adds	r3, r7, r1
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
  I2C_InitStruct.DigitalFilter = 0;
 8002078:	187b      	adds	r3, r7, r1
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
  I2C_InitStruct.OwnAddress1 = 0;
 800207e:	187b      	adds	r3, r7, r1
 8002080:	2200      	movs	r2, #0
 8002082:	611a      	str	r2, [r3, #16]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002084:	187b      	adds	r3, r7, r1
 8002086:	2200      	movs	r2, #0
 8002088:	615a      	str	r2, [r3, #20]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800208a:	187b      	adds	r3, r7, r1
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002090:	187b      	adds	r3, r7, r1
 8002092:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <MX_I2C1_Init+0x108>)
 8002094:	0019      	movs	r1, r3
 8002096:	0010      	movs	r0, r2
 8002098:	f000 fa46 	bl	8002528 <LL_I2C_Init>
  LL_I2C_EnableAutoEndMode(I2C1);
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <MX_I2C1_Init+0x108>)
 800209e:	0018      	movs	r0, r3
 80020a0:	f7ff fbd7 	bl	8001852 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <MX_I2C1_Init+0x108>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	0018      	movs	r0, r3
 80020ac:	f7ff fb6a 	bl	8001784 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020b0:	46c0      	nop			; (mov r8, r8)
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b00f      	add	sp, #60	; 0x3c
 80020b6:	bd90      	pop	{r4, r7, pc}
 80020b8:	48000400 	.word	0x48000400
 80020bc:	40005400 	.word	0x40005400
 80020c0:	2000090e 	.word	0x2000090e

080020c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ca:	003b      	movs	r3, r7
 80020cc:	0018      	movs	r0, r3
 80020ce:	2318      	movs	r3, #24
 80020d0:	001a      	movs	r2, r3
 80020d2:	2100      	movs	r1, #0
 80020d4:	f000 faea 	bl	80026ac <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	03db      	lsls	r3, r3, #15
 80020dc:	0018      	movs	r0, r3
 80020de:	f7ff fd0f 	bl	8001b00 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	029b      	lsls	r3, r3, #10
 80020e6:	0018      	movs	r0, r3
 80020e8:	f7ff fd0a 	bl	8001b00 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	02db      	lsls	r3, r3, #11
 80020f0:	0018      	movs	r0, r3
 80020f2:	f7ff fd05 	bl	8001b00 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_15);
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	021a      	lsls	r2, r3, #8
 80020fa:	2390      	movs	r3, #144	; 0x90
 80020fc:	05db      	lsls	r3, r3, #23
 80020fe:	0011      	movs	r1, r2
 8002100:	0018      	movs	r0, r3
 8002102:	f7ff fd6b 	bl	8001bdc <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002106:	003b      	movs	r3, r7
 8002108:	2280      	movs	r2, #128	; 0x80
 800210a:	0212      	lsls	r2, r2, #8
 800210c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800210e:	003b      	movs	r3, r7
 8002110:	2201      	movs	r2, #1
 8002112:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002114:	003b      	movs	r3, r7
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800211a:	003b      	movs	r3, r7
 800211c:	2200      	movs	r2, #0
 800211e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002120:	003b      	movs	r3, r7
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002126:	003a      	movs	r2, r7
 8002128:	2390      	movs	r3, #144	; 0x90
 800212a:	05db      	lsls	r3, r3, #23
 800212c:	0011      	movs	r1, r2
 800212e:	0018      	movs	r0, r3
 8002130:	f000 f900 	bl	8002334 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002134:	46c0      	nop			; (mov r8, r8)
 8002136:	46bd      	mov	sp, r7
 8002138:	b006      	add	sp, #24
 800213a:	bd80      	pop	{r7, pc}

0800213c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <NMI_Handler+0x4>

08002142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002146:	e7fe      	b.n	8002146 <HardFault_Handler+0x4>

08002148 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800214c:	46c0      	nop			; (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002160:	46c0      	nop			; (mov r8, r8)
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002170:	480d      	ldr	r0, [pc, #52]	; (80021a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002172:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002174:	f7ff fff7 	bl	8002166 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002178:	480c      	ldr	r0, [pc, #48]	; (80021ac <LoopForever+0x6>)
  ldr r1, =_edata
 800217a:	490d      	ldr	r1, [pc, #52]	; (80021b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800217c:	4a0d      	ldr	r2, [pc, #52]	; (80021b4 <LoopForever+0xe>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002180:	e002      	b.n	8002188 <LoopCopyDataInit>

08002182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002186:	3304      	adds	r3, #4

08002188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800218c:	d3f9      	bcc.n	8002182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002190:	4c0a      	ldr	r4, [pc, #40]	; (80021bc <LoopForever+0x16>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002194:	e001      	b.n	800219a <LoopFillZerobss>

08002196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002198:	3204      	adds	r2, #4

0800219a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800219c:	d3fb      	bcc.n	8002196 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800219e:	f000 fa61 	bl	8002664 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021a2:	f7ff fe6d 	bl	8001e80 <main>

080021a6 <LoopForever>:

LoopForever:
    b LoopForever
 80021a6:	e7fe      	b.n	80021a6 <LoopForever>
  ldr   r0, =_estack
 80021a8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80021ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80021b4:	08002764 	.word	0x08002764
  ldr r2, =_sbss
 80021b8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80021bc:	20000030 	.word	0x20000030

080021c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021c0:	e7fe      	b.n	80021c0 <ADC1_IRQHandler>

080021c2 <LL_GPIO_SetPinMode>:
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b084      	sub	sp, #16
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6819      	ldr	r1, [r3, #0]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	435b      	muls	r3, r3
 80021d6:	001a      	movs	r2, r3
 80021d8:	0013      	movs	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	189b      	adds	r3, r3, r2
 80021de:	43db      	mvns	r3, r3
 80021e0:	400b      	ands	r3, r1
 80021e2:	001a      	movs	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	435b      	muls	r3, r3
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	434b      	muls	r3, r1
 80021ec:	431a      	orrs	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	601a      	str	r2, [r3, #0]
}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	46bd      	mov	sp, r7
 80021f6:	b004      	add	sp, #16
 80021f8:	bd80      	pop	{r7, pc}

080021fa <LL_GPIO_SetPinOutputType>:
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	43d2      	mvns	r2, r2
 800220e:	401a      	ands	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	434b      	muls	r3, r1
 8002216:	431a      	orrs	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	605a      	str	r2, [r3, #4]
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	b004      	add	sp, #16
 8002222:	bd80      	pop	{r7, pc}

08002224 <LL_GPIO_SetPinSpeed>:
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6899      	ldr	r1, [r3, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	435b      	muls	r3, r3
 8002238:	001a      	movs	r2, r3
 800223a:	0013      	movs	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	189b      	adds	r3, r3, r2
 8002240:	43db      	mvns	r3, r3
 8002242:	400b      	ands	r3, r1
 8002244:	001a      	movs	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	435b      	muls	r3, r3
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	434b      	muls	r3, r1
 800224e:	431a      	orrs	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	609a      	str	r2, [r3, #8]
}
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	b004      	add	sp, #16
 800225a:	bd80      	pop	{r7, pc}

0800225c <LL_GPIO_SetPinPull>:
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	68d9      	ldr	r1, [r3, #12]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	435b      	muls	r3, r3
 8002270:	001a      	movs	r2, r3
 8002272:	0013      	movs	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	189b      	adds	r3, r3, r2
 8002278:	43db      	mvns	r3, r3
 800227a:	400b      	ands	r3, r1
 800227c:	001a      	movs	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	435b      	muls	r3, r3
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	434b      	muls	r3, r1
 8002286:	431a      	orrs	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	60da      	str	r2, [r3, #12]
}
 800228c:	46c0      	nop			; (mov r8, r8)
 800228e:	46bd      	mov	sp, r7
 8002290:	b004      	add	sp, #16
 8002292:	bd80      	pop	{r7, pc}

08002294 <LL_GPIO_SetAFPin_0_7>:
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a19      	ldr	r1, [r3, #32]
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	435b      	muls	r3, r3
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	4353      	muls	r3, r2
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	435a      	muls	r2, r3
 80022b0:	0013      	movs	r3, r2
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	43db      	mvns	r3, r3
 80022b8:	400b      	ands	r3, r1
 80022ba:	001a      	movs	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	435b      	muls	r3, r3
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	434b      	muls	r3, r1
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	434b      	muls	r3, r1
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	434b      	muls	r3, r1
 80022cc:	431a      	orrs	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	621a      	str	r2, [r3, #32]
}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b004      	add	sp, #16
 80022d8:	bd80      	pop	{r7, pc}

080022da <LL_GPIO_SetAFPin_8_15>:
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	0a12      	lsrs	r2, r2, #8
 80022f2:	4353      	muls	r3, r2
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	0a12      	lsrs	r2, r2, #8
 80022f8:	4353      	muls	r3, r2
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	0a12      	lsrs	r2, r2, #8
 80022fe:	435a      	muls	r2, r3
 8002300:	0013      	movs	r3, r2
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	43db      	mvns	r3, r3
 8002308:	400b      	ands	r3, r1
 800230a:	001a      	movs	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	0a1b      	lsrs	r3, r3, #8
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	0a09      	lsrs	r1, r1, #8
 8002314:	434b      	muls	r3, r1
 8002316:	68b9      	ldr	r1, [r7, #8]
 8002318:	0a09      	lsrs	r1, r1, #8
 800231a:	434b      	muls	r3, r1
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	0a09      	lsrs	r1, r1, #8
 8002320:	434b      	muls	r3, r1
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	434b      	muls	r3, r1
 8002326:	431a      	orrs	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800232c:	46c0      	nop			; (mov r8, r8)
 800232e:	46bd      	mov	sp, r7
 8002330:	b004      	add	sp, #16
 8002332:	bd80      	pop	{r7, pc}

08002334 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002342:	e048      	b.n	80023d6 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2101      	movs	r1, #1
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4091      	lsls	r1, r2
 800234e:	000a      	movs	r2, r1
 8002350:	4013      	ands	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d03a      	beq.n	80023d0 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d003      	beq.n	800236a <LL_GPIO_Init+0x36>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d10e      	bne.n	8002388 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	68b9      	ldr	r1, [r7, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	0018      	movs	r0, r3
 8002374:	f7ff ff56 	bl	8002224 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	6819      	ldr	r1, [r3, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	0018      	movs	r0, r3
 8002384:	f7ff ff39 	bl	80021fa <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	0018      	movs	r0, r3
 8002392:	f7ff ff63 	bl	800225c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d111      	bne.n	80023c2 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2bff      	cmp	r3, #255	; 0xff
 80023a2:	d807      	bhi.n	80023b4 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	695a      	ldr	r2, [r3, #20]
 80023a8:	68b9      	ldr	r1, [r7, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	0018      	movs	r0, r3
 80023ae:	f7ff ff71 	bl	8002294 <LL_GPIO_SetAFPin_0_7>
 80023b2:	e006      	b.n	80023c2 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	0018      	movs	r0, r3
 80023be:	f7ff ff8c 	bl	80022da <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	68b9      	ldr	r1, [r7, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	0018      	movs	r0, r3
 80023cc:	f7ff fef9 	bl	80021c2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	3301      	adds	r3, #1
 80023d4:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	40da      	lsrs	r2, r3
 80023de:	1e13      	subs	r3, r2, #0
 80023e0:	d1b0      	bne.n	8002344 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	0018      	movs	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b004      	add	sp, #16
 80023ea:	bd80      	pop	{r7, pc}

080023ec <LL_I2C_Enable>:
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2201      	movs	r2, #1
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	601a      	str	r2, [r3, #0]
}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	b002      	add	sp, #8
 8002406:	bd80      	pop	{r7, pc}

08002408 <LL_I2C_Disable>:
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2201      	movs	r2, #1
 8002416:	4393      	bics	r3, r2
 8002418:	001a      	movs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	601a      	str	r2, [r3, #0]
}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	46bd      	mov	sp, r7
 8002422:	b002      	add	sp, #8
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <LL_I2C_ConfigFilters>:
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a06      	ldr	r2, [pc, #24]	; (8002454 <LL_I2C_ConfigFilters+0x2c>)
 800243a:	401a      	ands	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	0219      	lsls	r1, r3, #8
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	430b      	orrs	r3, r1
 8002444:	431a      	orrs	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	601a      	str	r2, [r3, #0]
}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	46bd      	mov	sp, r7
 800244e:	b004      	add	sp, #16
 8002450:	bd80      	pop	{r7, pc}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	ffffe0ff 	.word	0xffffe0ff

08002458 <LL_I2C_SetOwnAddress1>:
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	0adb      	lsrs	r3, r3, #11
 800246a:	02da      	lsls	r2, r3, #11
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	430b      	orrs	r3, r1
 8002472:	431a      	orrs	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	609a      	str	r2, [r3, #8]
}
 8002478:	46c0      	nop			; (mov r8, r8)
 800247a:	46bd      	mov	sp, r7
 800247c:	b004      	add	sp, #16
 800247e:	bd80      	pop	{r7, pc}

08002480 <LL_I2C_EnableOwnAddress1>:
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	0212      	lsls	r2, r2, #8
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	609a      	str	r2, [r3, #8]
}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	46bd      	mov	sp, r7
 800249a:	b002      	add	sp, #8
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <LL_I2C_DisableOwnAddress1>:
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a03      	ldr	r2, [pc, #12]	; (80024bc <LL_I2C_DisableOwnAddress1+0x1c>)
 80024ae:	401a      	ands	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	609a      	str	r2, [r3, #8]
}
 80024b4:	46c0      	nop			; (mov r8, r8)
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b002      	add	sp, #8
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	ffff7fff 	.word	0xffff7fff

080024c0 <LL_I2C_SetTiming>:
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	611a      	str	r2, [r3, #16]
}
 80024d0:	46c0      	nop			; (mov r8, r8)
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b002      	add	sp, #8
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <LL_I2C_SetMode>:
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a05      	ldr	r2, [pc, #20]	; (80024fc <LL_I2C_SetMode+0x24>)
 80024e8:	401a      	ands	r2, r3
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	601a      	str	r2, [r3, #0]
}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b002      	add	sp, #8
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	ffcfffff 	.word	0xffcfffff

08002500 <LL_I2C_AcknowledgeNextData>:
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4a05      	ldr	r2, [pc, #20]	; (8002524 <LL_I2C_AcknowledgeNextData+0x24>)
 8002510:	401a      	ands	r2, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	605a      	str	r2, [r3, #4]
}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	b002      	add	sp, #8
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	ffff7fff 	.word	0xffff7fff

08002528 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	0018      	movs	r0, r3
 8002536:	f7ff ff67 	bl	8002408 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6899      	ldr	r1, [r3, #8]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	0018      	movs	r0, r3
 8002546:	f7ff ff6f 	bl	8002428 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	0011      	movs	r1, r2
 8002552:	0018      	movs	r0, r3
 8002554:	f7ff ffb4 	bl	80024c0 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	0018      	movs	r0, r3
 800255c:	f7ff ff46 	bl	80023ec <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	0018      	movs	r0, r3
 8002564:	f7ff ff9c 	bl	80024a0 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	6919      	ldr	r1, [r3, #16]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	699a      	ldr	r2, [r3, #24]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	0018      	movs	r0, r3
 8002574:	f7ff ff70 	bl	8002458 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <LL_I2C_Init+0x60>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	0018      	movs	r0, r3
 8002584:	f7ff ff7c 	bl	8002480 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	0011      	movs	r1, r2
 8002590:	0018      	movs	r0, r3
 8002592:	f7ff ffa1 	bl	80024d8 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	0011      	movs	r1, r2
 800259e:	0018      	movs	r0, r3
 80025a0:	f7ff ffae 	bl	8002500 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	0018      	movs	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b002      	add	sp, #8
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80025ba:	6839      	ldr	r1, [r7, #0]
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7fd fda3 	bl	8000108 <__udivsi3>
 80025c2:	0003      	movs	r3, r0
 80025c4:	001a      	movs	r2, r3
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <LL_InitTick+0x30>)
 80025c8:	3a01      	subs	r2, #1
 80025ca:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <LL_InitTick+0x30>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025d2:	4b03      	ldr	r3, [pc, #12]	; (80025e0 <LL_InitTick+0x30>)
 80025d4:	2205      	movs	r2, #5
 80025d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80025d8:	46c0      	nop			; (mov r8, r8)
 80025da:	46bd      	mov	sp, r7
 80025dc:	b002      	add	sp, #8
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	e000e010 	.word	0xe000e010

080025e4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80025ec:	23fa      	movs	r3, #250	; 0xfa
 80025ee:	009a      	lsls	r2, r3, #2
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	0011      	movs	r1, r2
 80025f4:	0018      	movs	r0, r3
 80025f6:	f7ff ffdb 	bl	80025b0 <LL_InitTick>
}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b002      	add	sp, #8
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800260c:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <LL_mDelay+0x40>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002612:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3301      	adds	r3, #1
 8002618:	d00c      	beq.n	8002634 <LL_mDelay+0x30>
  {
    Delay++;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3301      	adds	r3, #1
 800261e:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002620:	e008      	b.n	8002634 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <LL_mDelay+0x40>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	025b      	lsls	r3, r3, #9
 800262a:	4013      	ands	r3, r2
 800262c:	d002      	beq.n	8002634 <LL_mDelay+0x30>
    {
      Delay--;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3b01      	subs	r3, #1
 8002632:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f3      	bne.n	8002622 <LL_mDelay+0x1e>
    }
  }
}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	46c0      	nop			; (mov r8, r8)
 800263e:	46bd      	mov	sp, r7
 8002640:	b004      	add	sp, #16
 8002642:	bd80      	pop	{r7, pc}
 8002644:	e000e010 	.word	0xe000e010

08002648 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <LL_SetSystemCoreClock+0x18>)
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	601a      	str	r2, [r3, #0]
}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	46bd      	mov	sp, r7
 800265a:	b002      	add	sp, #8
 800265c:	bd80      	pop	{r7, pc}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	20000000 	.word	0x20000000

08002664 <__libc_init_array>:
 8002664:	b570      	push	{r4, r5, r6, lr}
 8002666:	2600      	movs	r6, #0
 8002668:	4d0c      	ldr	r5, [pc, #48]	; (800269c <__libc_init_array+0x38>)
 800266a:	4c0d      	ldr	r4, [pc, #52]	; (80026a0 <__libc_init_array+0x3c>)
 800266c:	1b64      	subs	r4, r4, r5
 800266e:	10a4      	asrs	r4, r4, #2
 8002670:	42a6      	cmp	r6, r4
 8002672:	d109      	bne.n	8002688 <__libc_init_array+0x24>
 8002674:	2600      	movs	r6, #0
 8002676:	f000 f821 	bl	80026bc <_init>
 800267a:	4d0a      	ldr	r5, [pc, #40]	; (80026a4 <__libc_init_array+0x40>)
 800267c:	4c0a      	ldr	r4, [pc, #40]	; (80026a8 <__libc_init_array+0x44>)
 800267e:	1b64      	subs	r4, r4, r5
 8002680:	10a4      	asrs	r4, r4, #2
 8002682:	42a6      	cmp	r6, r4
 8002684:	d105      	bne.n	8002692 <__libc_init_array+0x2e>
 8002686:	bd70      	pop	{r4, r5, r6, pc}
 8002688:	00b3      	lsls	r3, r6, #2
 800268a:	58eb      	ldr	r3, [r5, r3]
 800268c:	4798      	blx	r3
 800268e:	3601      	adds	r6, #1
 8002690:	e7ee      	b.n	8002670 <__libc_init_array+0xc>
 8002692:	00b3      	lsls	r3, r6, #2
 8002694:	58eb      	ldr	r3, [r5, r3]
 8002696:	4798      	blx	r3
 8002698:	3601      	adds	r6, #1
 800269a:	e7f2      	b.n	8002682 <__libc_init_array+0x1e>
 800269c:	0800275c 	.word	0x0800275c
 80026a0:	0800275c 	.word	0x0800275c
 80026a4:	0800275c 	.word	0x0800275c
 80026a8:	08002760 	.word	0x08002760

080026ac <memset>:
 80026ac:	0003      	movs	r3, r0
 80026ae:	1882      	adds	r2, r0, r2
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d100      	bne.n	80026b6 <memset+0xa>
 80026b4:	4770      	bx	lr
 80026b6:	7019      	strb	r1, [r3, #0]
 80026b8:	3301      	adds	r3, #1
 80026ba:	e7f9      	b.n	80026b0 <memset+0x4>

080026bc <_init>:
 80026bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c2:	bc08      	pop	{r3}
 80026c4:	469e      	mov	lr, r3
 80026c6:	4770      	bx	lr

080026c8 <_fini>:
 80026c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ce:	bc08      	pop	{r3}
 80026d0:	469e      	mov	lr, r3
 80026d2:	4770      	bx	lr
